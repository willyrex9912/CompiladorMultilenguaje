/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Programa = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,21,22,23],$V1=[1,6],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,20],$V6=[17,24],$V7=[1,38],$V8=[1,33],$V9=[1,34],$Va=[1,35],$Vb=[1,36],$Vc=[1,37],$Vd=[17,61],$Ve=[2,24],$Vf=[1,42],$Vg=[1,43],$Vh=[17,30,31,61],$Vi=[2,29],$Vj=[1,46],$Vk=[17,30,31,35,61],$Vl=[2,33],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[17,30,31,35,39,40,41,42,43,44,61],$Vt=[2,42],$Vu=[1,57],$Vv=[1,58],$Vw=[17,30,31,35,39,40,41,42,43,44,48,49,61],$Vx=[2,47],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[17,30,31,35,39,40,41,42,43,44,48,49,53,54,55,61],$VC=[2,53],$VD=[1,66],$VE=[17,30,31,35,39,40,41,42,43,44,48,49,53,54,55,59,61],$VF=[20,60,62,64,65,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicial":3,"a1":4,"EOF":5,"instrucciones_include":6,"declaraciones":7,"include":8,"PR_INCLUDE":9,"PAQUETE":10,"instrucciones_include_p":11,"declaraciones_p":12,"declaracion_variable":13,"tipo":14,"ids":15,"asignacion":16,"PUNTO_Y_COMA":17,"ids_p":18,"COMA":19,"ID":20,"PR_INT":21,"PR_FLOAT":22,"PR_CHAR":23,"ASIGNACION":24,"expresion_multiple":25,"a3":26,"b3":27,"a3p":28,"a3bp":29,"OR":30,"XOR":31,"c3":32,"b3p":33,"b3bp":34,"AND":35,"d3":36,"c3p":37,"c3bp":38,"IGUAL":39,"NO_IGUAL":40,"MAYOR":41,"MENOR":42,"MAYOR_IGUAL":43,"MENOR_IGUAL":44,"e3":45,"d3p":46,"d3bp":47,"SUMA":48,"RESTA":49,"f3":50,"e3p":51,"e3bp":52,"MULTIPLICACION":53,"DIVISION":54,"MODULO":55,"g3":56,"f3p":57,"f3bp":58,"POTENCIA":59,"PARENT_A":60,"PARENT_C":61,"NOT":62,"BOOLEAN":63,"INT":64,"FLOAT":65,"CHAR":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PR_INCLUDE",10:"PAQUETE",17:"PUNTO_Y_COMA",19:"COMA",20:"ID",21:"PR_INT",22:"PR_FLOAT",23:"PR_CHAR",24:"ASIGNACION",30:"OR",31:"XOR",35:"AND",39:"IGUAL",40:"NO_IGUAL",41:"MAYOR",42:"MENOR",43:"MAYOR_IGUAL",44:"MENOR_IGUAL",48:"SUMA",49:"RESTA",53:"MULTIPLICACION",54:"DIVISION",55:"MODULO",59:"POTENCIA",60:"PARENT_A",61:"PARENT_C",62:"NOT",63:"BOOLEAN",64:"INT",65:"FLOAT",66:"CHAR"},
productions_: [0,[3,2],[4,2],[8,2],[6,1],[6,0],[11,1],[11,2],[7,1],[7,0],[12,1],[12,2],[13,4],[15,1],[15,3],[18,1],[14,1],[14,1],[14,1],[16,0],[16,2],[25,1],[26,2],[28,3],[28,0],[29,1],[29,1],[27,2],[33,3],[33,0],[34,1],[32,2],[37,3],[37,0],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[36,2],[46,3],[46,0],[47,1],[47,1],[45,2],[51,3],[51,0],[52,1],[52,1],[52,1],[50,2],[57,3],[57,0],[58,1],[56,3],[56,2],[56,2],[56,4],[56,1],[56,1],[56,1],[56,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                        for(const simbolo in tablaDeSimbolos){
                            console.log("-----------------");
                            console.log("Id: "+tablaDeSimbolos[simbolo].id);
                            console.log("Tipo: "+tablaDeSimbolos[simbolo].tipo);
                            console.log("Ambito: "+tablaDeSimbolos[simbolo].ambito);
                            console.log("Visibilidad: "+tablaDeSimbolos[simbolo].visibilidad);
                            console.log("Rol: "+tablaDeSimbolos[simbolo].rol);
                        }
                    
break;
case 12:

            //declaracion y asignacion
            if($$[$0-1]==null || $$[$0-3] == $$[$0-1].tipoResultado){
                while(ids.length>0){
                    //asignacion de tipo correcta
                    let id = ids.pop();
                    if(existeVariableMetodo(id,ambitoActual.at(-1),yy.VARIABLE)){
                        errorSemantico("La variable "+id+" ya ha sido declarada en "+ambitoActual.at(-1)+".",this._$.first_line,this._$.first_column);
                    }else{
                        if($$[$0-1] != null){
                            //simboloVariable.valor = $$[$0-1].valor;
                        }
                        agregarSimbolo(id,$$[$0-3],yy.GLOBAL,yy.DEFAULT,yy.VARIABLE);
                    }
                }
            }else{
                errorSemantico("Tipo de dato requerido : "+$$[$0-3]+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        
break;
case 15:
 ids.push($$[$0]); 
break;
case 16:
 this.$ = yy.INT; 
break;
case 17:
 this.$ = yy.FLOAT; 
break;
case 18:
 this.$ = yy.CHAR; 
break;
case 19: case 24: case 29: case 33: case 42: case 47: case 53:
 this.$ = null; 
break;
case 20: case 21:
 this.$ = $$[$0]; 
break;
case 22: case 27: case 31: case 40: case 45: case 51:

                this.$ = produccion(yy,$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
            
break;
case 23: case 28: case 32: case 41: case 46: case 52:

                        this.$ = produccionPrima(yy,$$[$0-2],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
                    
break;
case 25:
 this.$ = yy.OR; 
break;
case 26:
 this.$ = yy.XOR; 
break;
case 30:
 this.$ = yy.AND; 
break;
case 34:
 this.$ = yy.IGUAL; 
break;
case 35:
 this.$ = yy.NO_IGUAL; 
break;
case 36:
 this.$ = yy.MAYOR; 
break;
case 37:
 this.$ = yy.MENOR; 
break;
case 38:
 this.$ = yy.MAYOR_IGUAL; 
break;
case 39:
 this.$ = yy.MENOR_IGUAL; 
break;
case 43:
 this.$ = yy.SUMA; 
break;
case 44:
 this.$ = yy.RESTA; 
break;
case 48:
 this.$ = yy.MULTIPLICACION; 
break;
case 49:
 this.$ = yy.DIVISION; 
break;
case 50:
 this.$ = yy.MODULO; 
break;
case 54:
 this.$ = yy.POTENCIA; 
break;
case 55:
 this.$ = $$[$0-1]; 
break;
case 56:

        let simbolo = obtenerSimbolo($$[$0]);
        if(simbolo==null){
            errorSemantico("No se encuentra el s√≠mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
            this.$ = null;
        }else{
            if(simbolo.tipo==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+simbolo.tipo+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 57:

        operacion = new Object();
        operacion.tipoResultado = yy.BOOLEAN;
        this.$ = operacion;
    
break;
case 58:

        if($$[$0-1]==null){
            this.$ = null;
        }else{
            if($$[$0-1].tipoResultado==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 59:

                    operacion = new Object();
                    operacion.tipoResultado = yy.INT;
                    this.$ = operacion;
                
break;
case 60:

                    operacion = new Object();
                    operacion.tipoResultado = yy.FLOAT;
                    this.$ = operacion;
                
break;
case 61:

                    operacion = new Object();
                    operacion.tipoResultado = yy.CHAR;
                    this.$ = operacion;
                
break;
case 62:

                    operacion = new Object();
                    let sim_id_a = validarVariable($$[$0],yy);
                    if(sim_id_a==null){
                        errorSemantico("No se encuentra el s√≠mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
                        operacion.tipoResultado = yy.ID;
                    }else{
                        operacion.tipoResultado = sim_id_a.tipo;
                    }
                    this.$ = operacion;
                
break;
}
},
table: [o($V0,[2,5],{3:1,4:2,6:3,11:4,8:5,9:$V1}),{1:[3]},{5:[1,7]},{5:[2,9],7:8,12:9,13:10,14:11,21:$V2,22:$V3,23:$V4},o($V0,[2,4]),o($V0,[2,6],{8:5,11:15,9:$V1}),{10:[1,16]},{1:[2,1]},{5:[2,2]},{5:[2,8]},{5:[2,10],12:17,13:10,14:11,21:$V2,22:$V3,23:$V4},{15:18,18:19,20:$V5},{20:[2,16]},{20:[2,17]},{20:[2,18]},o($V0,[2,7]),o([5,9,21,22,23],[2,3]),{5:[2,11]},{16:21,17:[2,19],24:[1,22]},o($V6,[2,13],{19:[1,23]}),o([17,19,24],[2,15]),{17:[1,24]},{20:$V7,25:25,26:26,27:27,32:28,36:29,45:30,50:31,56:32,60:$V8,62:$V9,64:$Va,65:$Vb,66:$Vc},{15:39,18:19,20:$V5},o($V0,[2,12]),{17:[2,20]},{17:[2,21]},o($Vd,$Ve,{28:40,29:41,30:$Vf,31:$Vg}),o($Vh,$Vi,{33:44,34:45,35:$Vj}),o($Vk,$Vl,{37:47,38:48,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr}),o($Vs,$Vt,{46:55,47:56,48:$Vu,49:$Vv}),o($Vw,$Vx,{51:59,52:60,53:$Vy,54:$Vz,55:$VA}),o($VB,$VC,{57:64,58:65,59:$VD}),{20:$V7,26:67,27:27,32:28,36:29,45:30,50:31,56:32,60:$V8,62:$V9,64:$Va,65:$Vb,66:$Vc},{20:[1,68],60:[1,70],63:[1,69]},o($VE,[2,59]),o($VE,[2,60]),o($VE,[2,61]),o($VE,[2,62]),o($V6,[2,14]),o($Vd,[2,22]),{20:$V7,27:71,32:28,36:29,45:30,50:31,56:32,60:$V8,62:$V9,64:$Va,65:$Vb,66:$Vc},o($VF,[2,25]),o($VF,[2,26]),o($Vh,[2,27]),{20:$V7,32:72,36:29,45:30,50:31,56:32,60:$V8,62:$V9,64:$Va,65:$Vb,66:$Vc},o($VF,[2,30]),o($Vk,[2,31]),{20:$V7,36:73,45:30,50:31,56:32,60:$V8,62:$V9,64:$Va,65:$Vb,66:$Vc},o($VF,[2,34]),o($VF,[2,35]),o($VF,[2,36]),o($VF,[2,37]),o($VF,[2,38]),o($VF,[2,39]),o($Vs,[2,40]),{20:$V7,45:74,50:31,56:32,60:$V8,62:$V9,64:$Va,65:$Vb,66:$Vc},o($VF,[2,43]),o($VF,[2,44]),o($Vw,[2,45]),{20:$V7,50:75,56:32,60:$V8,62:$V9,64:$Va,65:$Vb,66:$Vc},o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),o($VB,[2,51]),{20:$V7,56:76,60:$V8,62:$V9,64:$Va,65:$Vb,66:$Vc},o($VF,[2,54]),{61:[1,77]},o($VE,[2,56]),o($VE,[2,57]),{20:$V7,26:78,27:27,32:28,36:29,45:30,50:31,56:32,60:$V8,62:$V9,64:$Va,65:$Vb,66:$Vc},o($Vd,$Ve,{29:41,28:79,30:$Vf,31:$Vg}),o($Vh,$Vi,{34:45,33:80,35:$Vj}),o($Vk,$Vl,{38:48,37:81,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr}),o($Vs,$Vt,{47:56,46:82,48:$Vu,49:$Vv}),o($Vw,$Vx,{52:60,51:83,53:$Vy,54:$Vz,55:$VA}),o($VB,$VC,{58:65,57:84,59:$VD}),o($VE,[2,55]),{61:[1,85]},o($Vd,[2,23]),o($Vh,[2,28]),o($Vk,[2,32]),o($Vs,[2,41]),o($Vw,[2,46]),o($VB,[2,52]),o($VE,[2,58])],
defaultActions: {7:[2,1],8:[2,2],9:[2,8],12:[2,16],13:[2,17],14:[2,18],17:[2,11],25:[2,20],26:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let errores = [];
    let tablaDeSimbolos = [];
    let ambitoActual = [];
    let ids = [];

    exports.getErrores = function (){
        return errores;
    }
        
    exports.reset = function(){
        errores.splice(0, errores.length);
        tablaDeSimbolos.splice(0, tablaDeSimbolos.length);
        ambitoActual.splice(0, ambitoActual.length);
        ids.splice(0, ids.length);
    }

    function errorSemantico(descripcion,linea,columna){
        ErrorLS = new Object();
        ErrorLS.lexema = "";
        ErrorLS.linea = linea;
        ErrorLS.columna = columna;
        ErrorLS.tipo = 'Sem√°ntico';
        ErrorLS.descripcion = descripcion;
        errores.push(ErrorLS);
    }

    function produccion(yy,$1,$2,linea,columna){
        try{
            if($2!=null){
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($1.tipoResultado,$2.tipoResultado,$2.operacionPendiente);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;
                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$2.operacionPendiente+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }else{
                return $1;
            }
        }catch(error){
            return null;
        }
    }

    function produccionPrima(yy,$1,$2,$3,linea,columna){
        try{
            if($3==null){
                operacion = new Object();
                operacion.tipoResultado = $2.tipoResultado;
                operacion.operacionPendiente = $1;
                return operacion;
            }else{
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($2.tipoResultado,$3.tipoResultado,$1);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;
                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$1+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }
        }catch(error){
            return null;
        }
    }

    function existeVariableMetodo(id,ambito,rol){
        for(let simbolo in tablaDeSimbolos){
            if(tablaDeSimbolos[simbolo].rol==rol && tablaDeSimbolos[simbolo].id==id && ambito==tablaDeSimbolos[simbolo].ambito){
                return true;
            }
        }
        return false;
    }

    function agregarSimbolo(id,tipo,ambito,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = ambito;
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        tablaDeSimbolos.push(simboloNuevo);
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*ignorar*/
break;
case 1: /*ignorar comentario de linea*/
break;
case 2: /*ignorar comentario de bloque*/
break;
case 3:return 65
break;
case 4:return 64
break;
case 5: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66; 
break;
case 6: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 10; 
break;
case 7:return 21
break;
case 8:return 22
break;
case 9:return 23
break;
case 10:return 9
break;
case 11:return 'PR_VOID'
break;
case 12:return 'PR_MAIN'
break;
case 13:return 'INCREMENTO'
break;
case 14:return 'DECREMENTO'
break;
case 15:return 48
break;
case 16:return 49
break;
case 17:return 53
break;
case 18:return 54
break;
case 19:return 55
break;
case 20:return 59
break;
case 21:return 'LLAVE_A'
break;
case 22:return 'LLAVE_C'
break;
case 23:return 'CORCH_A'
break;
case 24:return 'CORCH_C'
break;
case 25:return 60
break;
case 26:return 61
break;
case 27:return 31
break;
case 28:return 30
break;
case 29:return 35
break;
case 30:return 39
break;
case 31:return 40
break;
case 32:return 43
break;
case 33:return 44
break;
case 34:return 41
break;
case 35:return 42
break;
case 36:return 62
break;
case 37:return 17
break;
case 38:return 'DOS_PUNTOS'
break;
case 39:return 19
break;
case 40:return 24
break;
case 41:return 20
break;
case 42:return 5
break;
case 43:/*Instertar codigo para recuperar el error lexico*/
                //error
                ErrorLS = new Object();
                ErrorLS.lexema = yy_.yytext;
                ErrorLS.linea = yy_.yylloc.first_line;
                ErrorLS.columna = yy_.yylloc.first_column;
                ErrorLS.tipo = 'L√©xico';
                ErrorLS.descripcion = 'El lexema '+yy_.yytext+' no es v√°lido.';
                errores.push(ErrorLS);
        
break;
}
},
rules: [/^(?:[ \r\t\n]+)/,/^(?:[/][/].*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:'.')/,/^(?:"[^"]*")/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:#include\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:[+])/,/^(?:[-])/,/^(?:[*])/,/^(?:[/])/,/^(?:[%])/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\|\|)/,/^(?:\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z]+[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Programa;
exports.Parser = Programa.Parser;
exports.parse = function () { return Programa.parse.apply(Programa, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}