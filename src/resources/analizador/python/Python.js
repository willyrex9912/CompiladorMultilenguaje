/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Python = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[2,5,12],$V3=[1,29],$V4=[1,24],$V5=[1,25],$V6=[1,31],$V7=[1,30],$V8=[1,35],$V9=[6,19],$Va=[2,13,19,25,26,32,37],$Vb=[16,22],$Vc=[1,61],$Vd=[1,55],$Ve=[1,56],$Vf=[1,60],$Vg=[1,57],$Vh=[1,58],$Vi=[1,59],$Vj=[6,16,19,22],$Vk=[2,48],$Vl=[1,68],$Vm=[1,69],$Vn=[6,16,19,22,50,51],$Vo=[2,53],$Vp=[1,72],$Vq=[6,16,19,22,50,51,55],$Vr=[2,57],$Vs=[1,75],$Vt=[1,76],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[6,16,19,22,50,51,55,59,60,61,62,63,64],$Vz=[2,66],$VA=[1,83],$VB=[1,84],$VC=[6,16,19,22,50,51,55,59,60,61,62,63,64,68,69],$VD=[2,71],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[6,16,19,22,50,51,55,59,60,61,62,63,64,68,69,73,74,75],$VI=[2,77],$VJ=[1,92],$VK=[6,16,19,22,50,51,55,59,60,61,62,63,64,68,69,73,74,75,79],$VL=[13,14,80,81,82,83,84],$VM=[1,126],$VN=[1,125],$VO=[2,13,19,25,26,32,37,43,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"a1":4,"EOF":5,"SALTO_DE_LINEA":6,"declaracion_funcion":7,"err":8,"declaracion_funcion_p":9,"DOS_PUNTOS":10,"declaracion_funcion_b_p":11,"PR_DEF":12,"ID":13,"PARENT_A":14,"parametros_b_p":15,"PARENT_C":16,"INDENT":17,"instrucciones_metodo":18,"DEDENT":19,"parametros":20,"parametros_p":21,"COMA":22,"instruccion":23,"instruccion_p":24,"PR_PRINT":25,"PR_PRINTLN":26,"manejo_variable":27,"instruccion_if":28,"ciclo_for":29,"ASIGNACION":30,"expresion_multiple":31,"PR_FOR":32,"PR_IN":33,"PR_RANGE":34,"range":35,"numero":36,"PR_IF":37,"instruccion_if_p":38,"instruccion_if_b_p":39,"instrucciones_elif":40,"instruccion_else":41,"instruccion_elif":42,"PR_ELIF":43,"instruccion_elif_p":44,"PR_ELSE":45,"a3":46,"b3":47,"a3p":48,"a3bp":49,"OR":50,"XOR":51,"c3":52,"b3p":53,"b3bp":54,"AND":55,"d3":56,"c3p":57,"c3bp":58,"IGUAL":59,"NO_IGUAL":60,"MAYOR":61,"MENOR":62,"MAYOR_IGUAL":63,"MENOR_IGUAL":64,"e3":65,"d3p":66,"d3bp":67,"SUMA":68,"RESTA":69,"f3":70,"e3p":71,"e3bp":72,"MULTIPLICACION":73,"DIVISION":74,"MODULO":75,"g3":76,"f3p":77,"f3bp":78,"POTENCIA":79,"NOT":80,"BOOLEAN":81,"INT":82,"DOUBLE":83,"STRING":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SALTO_DE_LINEA",10:"DOS_PUNTOS",12:"PR_DEF",13:"ID",14:"PARENT_A",16:"PARENT_C",17:"INDENT",19:"DEDENT",22:"COMA",25:"PR_PRINT",26:"PR_PRINTLN",30:"ASIGNACION",32:"PR_FOR",33:"PR_IN",34:"PR_RANGE",37:"PR_IF",43:"PR_ELIF",45:"PR_ELSE",50:"OR",51:"XOR",55:"AND",59:"IGUAL",60:"NO_IGUAL",61:"MAYOR",62:"MENOR",63:"MAYOR_IGUAL",64:"MENOR_IGUAL",68:"SUMA",69:"RESTA",73:"MULTIPLICACION",74:"DIVISION",75:"MODULO",79:"POTENCIA",80:"NOT",81:"BOOLEAN",82:"INT",83:"DOUBLE",84:"STRING"},
productions_: [0,[3,2],[3,3],[4,1],[4,2],[4,2],[4,1],[8,1],[7,3],[9,5],[11,3],[11,1],[20,1],[20,3],[21,1],[15,1],[15,0],[18,1],[18,3],[18,1],[18,2],[18,2],[18,1],[23,1],[23,1],[23,1],[24,1],[24,1],[27,3],[29,11],[35,5],[35,3],[35,1],[36,1],[28,7],[38,3],[39,1],[39,2],[39,1],[39,0],[40,1],[40,2],[42,6],[44,3],[41,5],[31,1],[46,2],[48,3],[48,0],[49,1],[49,1],[47,2],[53,3],[53,0],[54,1],[52,2],[57,3],[57,0],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[56,2],[66,3],[66,0],[67,1],[67,1],[65,2],[71,3],[71,0],[72,1],[72,1],[72,1],[70,2],[77,3],[77,0],[78,1],[76,3],[76,2],[76,2],[76,4],[76,1],[76,1],[76,1],[76,1],[76,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:

                                for(const simbolo in tablaDeSimbolos){
                                    console.log("-----------------");
                                    console.log("Id: "+tablaDeSimbolos[simbolo].id);
                                    console.log("Tipo: "+tablaDeSimbolos[simbolo].tipo);
                                    console.log("Ambito: "+tablaDeSimbolos[simbolo].ambito);
                                    console.log("Visibilidad: "+tablaDeSimbolos[simbolo].visibilidad);
                                    console.log("Rol: "+tablaDeSimbolos[simbolo].rol);
                                }
                            
break;
case 7:

            //error
            ErrorLS = new Object();
            ErrorLS.lexema = yytext;
            ErrorLS.linea = this._$.first_line;
            ErrorLS.columna = this._$.first_column;
            ErrorLS.tipo = 'Sintáctico';
            ErrorLS.descripcion = '';
            errores.push(ErrorLS);
    
break;
case 8:

        ambitoActual.pop();
    
break;
case 9:

        let funcion = $$[$0-3]+cadParametros;
        ambitoActual.push(funcion);
        agregarSimbolo(funcion,"","global",yy.PUBLIC,yy.METODO);
        cadParametros = "";
        pushSimbolosParametros();
    
break;
case 14:
 
        cadParametros+="_"+$$[$0]; 
        if(simbolosParametros.some(w => w.id === $$[$0])){
            errorSemantico("La variable "+$$[$0]+" ya ha sido declarada como parámetro.",this._$.first_line,this._$.first_column);
        }else{
            agregarSimboloParametro($$[$0],"object",yy.PRIVATE,yy.PARAMETRO);
        }
    
break;
case 28:

        try{
            let sim_id_a = validarVariable($$[$0-2],yy);
            if(sim_id_a==null){
                //Declaracion y asignacion
                agregarSimbolo($$[$0-2],$$[$0].tipoResultado,ambitoActual.at(-1),yy.PRIVATE,yy.VARIABLE);
            }else{
                //Asignacion
            }
        }catch(error){
        }
    
break;
case 33:

        try{
            if($$[$0].tipoResultado!=yy.INT && $$[$0].tipoResultado!=yy.DOUBLE){
                errorSemantico("Tipo de dato requerido : "+yy.INT+" , "+yy.DOUBLE+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(error){
        }
    
break;
case 35: case 43:

        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
            errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(error){
        }
    
break;
case 45:
 this.$ = $$[$0]; 
break;
case 46: case 51: case 55: case 64: case 69: case 75:

                this.$ = produccion(yy,$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
            
break;
case 47: case 52: case 56: case 65: case 70: case 76:

                        this.$ = produccionPrima(yy,$$[$0-2],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
                    
break;
case 48: case 53: case 57: case 66: case 71: case 77:
 this.$ = null; 
break;
case 49:
 this.$ = yy.OR; 
break;
case 50:
 this.$ = yy.XOR; 
break;
case 54:
 this.$ = yy.AND; 
break;
case 58:
 this.$ = yy.IGUAL; 
break;
case 59:
 this.$ = yy.NO_IGUAL; 
break;
case 60:
 this.$ = yy.MAYOR; 
break;
case 61:
 this.$ = yy.MENOR; 
break;
case 62:
 this.$ = yy.MAYOR_IGUAL; 
break;
case 63:
 this.$ = yy.MENOR_IGUAL; 
break;
case 67:
 this.$ = yy.SUMA; 
break;
case 68:
 this.$ = yy.RESTA; 
break;
case 72:
 this.$ = yy.MULTIPLICACION; 
break;
case 73:
 this.$ = yy.DIVISION; 
break;
case 74:
 this.$ = yy.MODULO; 
break;
case 78:
 this.$ = yy.POTENCIA; 
break;
case 79:
 this.$ = $$[$0-1]; 
break;
case 80:

        let simbolo = obtenerSimbolo($$[$0]);
        if(simbolo==null){
            errorSemantico("No se encuentra el símbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
            this.$ = null;
        }else{
            if(simbolo.tipo==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+simbolo.tipo+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 81:

        operacion = new Object();
        operacion.tipoResultado = yy.BOOLEAN;
        this.$ = operacion;
    
break;
case 82:

        if($$[$0-1]==null){
            this.$ = null;
        }else{
            if($$[$0-1].tipoResultado==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 83:

                    operacion = new Object();
                    operacion.tipoResultado = yy.INT;
                    this.$ = operacion;
                
break;
case 84:

                    operacion = new Object();
                    operacion.tipoResultado = yy.DOUBLE;
                    this.$ = operacion;
                
break;
case 85:

                    operacion = new Object();
                    operacion.tipoResultado = yy.STRING;
                    this.$ = operacion;
                
break;
case 86:

                    operacion = new Object();
                    operacion.tipoResultado = yy.BOOLEAN;
                    this.$ = operacion;
                
break;
case 87:

                    operacion = new Object();
                    let sim_id_a = validarVariable($$[$0],yy);
                    if(sim_id_a==null){
                        errorSemantico("No se encuentra el símbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
                        operacion.tipoResultado = yy.ID;
                    }else{
                        operacion.tipoResultado = sim_id_a.tipo;
                    }
                    this.$ = operacion;
                
break;
}
},
table: [{2:$V0,3:1,4:2,6:[1,3],7:4,8:5,9:6,12:$V1},{1:[3]},{5:[1,9]},{2:$V0,4:10,7:4,8:5,9:6,12:$V1},{2:$V0,4:11,5:[2,3],7:4,8:5,9:6,12:$V1},{2:$V0,4:12,5:[2,6],7:4,8:5,9:6,12:$V1},{10:[1,13]},o([2,5,12,13,19,25,26,32,37],[2,7]),{13:[1,14]},{1:[2,1]},{5:[1,15]},{5:[2,4]},{5:[2,5]},{6:[1,18],11:16,17:[1,17]},{14:[1,19]},{1:[2,2]},o($V2,[2,8]),{2:$V0,8:23,13:$V3,18:20,23:21,24:22,25:$V4,26:$V5,27:26,28:27,29:28,32:$V6,37:$V7},o($V2,[2,11]),{13:$V8,15:32,16:[2,16],20:33,21:34},{19:[1,36]},{6:[1,37],19:[2,17]},{2:$V0,8:23,13:$V3,18:38,19:[2,19],23:21,24:22,25:$V4,26:$V5,27:26,28:27,29:28,32:$V6,37:$V7},{2:$V0,8:23,13:$V3,18:39,19:[2,22],23:21,24:22,25:$V4,26:$V5,27:26,28:27,29:28,32:$V6,37:$V7},o($V9,[2,23]),o($V9,[2,24]),o($V9,[2,25]),o($Va,[2,26]),o($Va,[2,27]),{30:[1,40]},{14:[1,42],38:41},{13:[1,43]},{16:[1,44]},{16:[2,15]},{16:[2,12],22:[1,45]},o($Vb,[2,14]),o($V2,[2,10]),{2:$V0,8:23,13:$V3,18:46,23:21,24:22,25:$V4,26:$V5,27:26,28:27,29:28,32:$V6,37:$V7},{19:[2,20]},{19:[2,21]},{13:$Vc,14:$Vd,31:47,46:48,47:49,52:50,56:51,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},{10:[1,62]},{13:$Vc,14:$Vd,31:63,46:48,47:49,52:50,56:51,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},{33:[1,64]},{10:[2,9]},{13:$V8,20:65,21:34},{19:[2,18]},o($V9,[2,28]),o($Vj,[2,45]),o($Vj,$Vk,{48:66,49:67,50:$Vl,51:$Vm}),o($Vn,$Vo,{53:70,54:71,55:$Vp}),o($Vq,$Vr,{57:73,58:74,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx}),o($Vy,$Vz,{66:81,67:82,68:$VA,69:$VB}),o($VC,$VD,{71:85,72:86,73:$VE,74:$VF,75:$VG}),o($VH,$VI,{77:90,78:91,79:$VJ}),{13:$Vc,14:$Vd,46:93,47:49,52:50,56:51,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},{13:[1,94],14:[1,96],81:[1,95]},o($VK,[2,83]),o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,86]),o($VK,[2,87]),{17:[1,97]},{16:[1,98]},{34:[1,99]},{16:[2,13]},o($Vj,[2,46]),{13:$Vc,14:$Vd,47:100,52:50,56:51,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},o($VL,[2,49]),o($VL,[2,50]),o($Vn,[2,51]),{13:$Vc,14:$Vd,52:101,56:51,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},o($VL,[2,54]),o($Vq,[2,55]),{13:$Vc,14:$Vd,56:102,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},o($VL,[2,58]),o($VL,[2,59]),o($VL,[2,60]),o($VL,[2,61]),o($VL,[2,62]),o($VL,[2,63]),o($Vy,[2,64]),{13:$Vc,14:$Vd,65:103,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},o($VL,[2,67]),o($VL,[2,68]),o($VC,[2,69]),{13:$Vc,14:$Vd,70:104,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},o($VL,[2,72]),o($VL,[2,73]),o($VL,[2,74]),o($VH,[2,75]),{13:$Vc,14:$Vd,76:105,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},o($VL,[2,78]),{16:[1,106]},o($VK,[2,80]),o($VK,[2,81]),{13:$Vc,14:$Vd,46:107,47:49,52:50,56:51,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},{2:$V0,8:23,13:$V3,18:108,23:21,24:22,25:$V4,26:$V5,27:26,28:27,29:28,32:$V6,37:$V7},{10:[2,35]},{14:[1,109]},o($Vj,$Vk,{49:67,48:110,50:$Vl,51:$Vm}),o($Vn,$Vo,{54:71,53:111,55:$Vp}),o($Vq,$Vr,{58:74,57:112,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx}),o($Vy,$Vz,{67:82,66:113,68:$VA,69:$VB}),o($VC,$VD,{72:86,71:114,73:$VE,74:$VF,75:$VG}),o($VH,$VI,{78:91,77:115,79:$VJ}),o($VK,[2,79]),{16:[1,116]},{19:[1,117]},{13:$Vc,14:$Vd,31:120,35:118,36:119,46:48,47:49,52:50,56:51,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},o($Vj,[2,47]),o($Vn,[2,52]),o($Vq,[2,56]),o($Vy,[2,65]),o($VC,[2,70]),o($VH,[2,76]),o($VK,[2,82]),o($Va,[2,39],{39:121,40:122,41:123,42:124,43:$VM,45:$VN}),{16:[1,127]},{16:[2,32],22:[1,128]},o($Vb,[2,33]),o($Va,[2,34]),o($Va,[2,36],{41:129,42:130,43:$VM,45:$VN}),o($Va,[2,38]),o($VO,[2,40]),{10:[1,131]},{14:[1,133],44:132},{10:[1,134]},{13:$Vc,14:$Vd,31:120,36:135,46:48,47:49,52:50,56:51,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},o($Va,[2,37]),o($VO,[2,41]),{17:[1,136]},{10:[1,137]},{13:$Vc,14:$Vd,31:138,46:48,47:49,52:50,56:51,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},{17:[1,139]},{16:[2,31],22:[1,140]},{2:$V0,8:23,13:$V3,18:141,23:21,24:22,25:$V4,26:$V5,27:26,28:27,29:28,32:$V6,37:$V7},{17:[1,142]},{16:[1,143]},{2:$V0,8:23,13:$V3,18:144,23:21,24:22,25:$V4,26:$V5,27:26,28:27,29:28,32:$V6,37:$V7},{13:$Vc,14:$Vd,31:120,36:145,46:48,47:49,52:50,56:51,65:52,70:53,76:54,80:$Ve,81:$Vf,82:$Vg,83:$Vh,84:$Vi},{19:[1,146]},{2:$V0,8:23,13:$V3,18:147,23:21,24:22,25:$V4,26:$V5,27:26,28:27,29:28,32:$V6,37:$V7},{10:[2,43]},{19:[1,148]},{16:[2,30]},o($Va,[2,44]),{19:[1,149]},o($Va,[2,29]),o($VO,[2,42])],
defaultActions: {9:[2,1],11:[2,4],12:[2,5],15:[2,2],33:[2,15],38:[2,20],39:[2,21],44:[2,9],46:[2,18],65:[2,13],98:[2,35],143:[2,43],145:[2,30]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
 let indent = [0]; let dedent = 0; 
    let errores = [];
    let tablaDeSimbolos = [];
    let ambitoActual = [];
    let ids = [];
    let simbolosParametros = [];
    let cadParametros = "";
    let ambitoClase = true;
    let tipoDatoSwtich = "";

    exports.getErrores = function (){
        return errores;
    }

    exports.reset = function(){
        errores.splice(0, errores.length);
        tablaDeSimbolos.splice(0, tablaDeSimbolos.length);
        ambitoActual.splice(0, ambitoActual.length);
        ids.splice(0, ids.length);
        simbolosParametros.splice(0, simbolosParametros.length);
        cadParametros = "";
        ambitoClase = true;
        tipoDatoSwtich = "";
        indent = [0];
        dedent = 0;
    }

    function errorSemantico(descripcion,linea,columna){
        ErrorLS = new Object();
        ErrorLS.lexema = "";
        ErrorLS.linea = linea;
        ErrorLS.columna = columna;
        ErrorLS.tipo = 'Semántico';
        ErrorLS.descripcion = descripcion;
        errores.push(ErrorLS);
    }

    function produccion(yy,$1,$2,linea,columna){
        try{
            if($2!=null){
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($1.tipoResultado,$2.tipoResultado,$2.operacionPendiente);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;
                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$2.operacionPendiente+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }else{
                return $1;
            }
        }catch(error){
            return null;
        }
    }

    function produccionPrima(yy,$1,$2,$3,linea,columna){
        try{
            if($3==null){
                operacion = new Object();
                operacion.tipoResultado = $2.tipoResultado;
                operacion.operacionPendiente = $1;
                return operacion;
            }else{
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($2.tipoResultado,$3.tipoResultado,$1);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;
                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$1+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }
        }catch(error){
            return null;
        }
    }

    function agregarSimbolo(id,tipo,ambito,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = ambito;
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        tablaDeSimbolos.push(simboloNuevo);
    }

    function agregarSimboloParametro(id,tipo,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = "";
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        simbolosParametros.push(simboloNuevo);
    }

    function pushSimbolosParametros(){
        while(simbolosParametros.length>0){
            tablaDeSimbolos.push(simbolosParametros.pop());
            tablaDeSimbolos.at(-1).ambito = ambitoActual.at(-1);
        }
    }

    function validarVariable(id,yy){
        let tabla = tablaDeSimbolos.slice();
        while(tabla.length>0){
            let sim = tabla.pop();
            if((sim.rol==yy.VARIABLE || sim.rol==yy.PARAMETRO) && sim.id==id){
                let ambitos = ambitoActual.slice();
                while(ambitos.length>0){
                    if(sim.ambito==ambitos.pop()){
                        return sim;
                    }
                }
            }
        }
        return null;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                            indent = indent || [0];
                                            dedent = dedent || 0;

                                            if (dedent) {
                                                dedent--;
                                                if(dedent){
                                                    this.unput(yy_.yytext);
                                                }
                                                return 19;
                                            }
                                            
                                            let indentacion = yy_.yytext.replace(/^(\r\n|\r|\n)+/, '').length;
                                            if (indentacion > indent[0]) {
                                                indent.unshift(indentacion);
                                                return 17;
                                            }

                                            let dedents = [];

                                            while (indentacion < indent[0]) {
                                                dedents.push('DEDENT');
                                                indent.shift();
                                            }

                                            if (dedents.length) {
                                                dedent = dedents.length - 1;
                                                if(dedent){
                                                    this.unput(yy_.yytext);
                                                }
                                                return 19;
                                            }
                                            return 6;
                                        
break;
case 1: /*ignorar por el momento*/ 
break;
case 2:return 83
break;
case 3:return 82
break;
case 4:return 81
break;
case 5: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 84; 
break;
case 6: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 84; 
break;
case 7:return 12
break;
case 8:return 25
break;
case 9:return 26
break;
case 10:return 37
break;
case 11:return 43
break;
case 12:return 45
break;
case 13:return 32
break;
case 14:return 33
break;
case 15:return 34
break;
case 16:return 79
break;
case 17:return 68
break;
case 18:return 69
break;
case 19:return 73
break;
case 20:return 74
break;
case 21:return 75
break;
case 22:return 'LLAVE_A'
break;
case 23:return 'LLAVE_C'
break;
case 24:return 'CORCH_A'
break;
case 25:return 'CORCH_C'
break;
case 26:return 14
break;
case 27:return 16
break;
case 28:return 50
break;
case 29:return 55
break;
case 30:return 59
break;
case 31:return 60
break;
case 32:return 63
break;
case 33:return 64
break;
case 34:return 61
break;
case 35:return 62
break;
case 36:return 80
break;
case 37:return 'PUNTO_Y_COMA'
break;
case 38:return 10
break;
case 39:return 22
break;
case 40:return 30
break;
case 41:return 13
break;
case 42:return 5
break;
case 43:/*Instertar codigo para recuperar el error lexico*/
            //error
            ErrorLS = new Object();
            ErrorLS.lexema = yy_.yytext;
            ErrorLS.linea = yy_.yylloc.first_line;
            ErrorLS.columna = yy_.yylloc.first_column;
            ErrorLS.tipo = 'Léxico';
            ErrorLS.descripcion = 'El lexema '+yy_.yytext+' no es válido.';
            errores.push(ErrorLS);
    
break;
}
},
rules: [/^(?:(\r\n|\r|\n)+[ \t]*)/,/^(?:[ \t]+)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:True|False\b)/,/^(?:"[^"]*")/,/^(?:'[^']*')/,/^(?:def\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:range\b)/,/^(?:\*\*)/,/^(?:[+])/,/^(?:[-])/,/^(?:[*])/,/^(?:[/])/,/^(?:[%])/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:or\b)/,/^(?:and\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:not\b)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z]+[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Python;
exports.Parser = Python.Parser;
exports.parse = function () { return Python.parse.apply(Python, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}