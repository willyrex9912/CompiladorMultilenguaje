/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Programa = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,19,20,21],$V1=[1,6],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,33],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[18,57],$Vc=[2,19],$Vd=[1,37],$Ve=[1,38],$Vf=[18,26,27,57],$Vg=[2,24],$Vh=[1,41],$Vi=[18,26,27,31,57],$Vj=[2,28],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[18,26,27,31,35,36,37,38,39,40,57],$Vr=[2,37],$Vs=[1,52],$Vt=[1,53],$Vu=[18,26,27,31,35,36,37,38,39,40,44,45,57],$Vv=[2,42],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[18,26,27,31,35,36,37,38,39,40,44,45,49,50,51,57],$VA=[2,48],$VB=[1,61],$VC=[18,26,27,31,35,36,37,38,39,40,44,45,49,50,51,55,57],$VD=[15,56,58,60,61,62];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicial":3,"a1":4,"EOF":5,"instrucciones_include":6,"declaraciones":7,"include":8,"PR_INCLUDE":9,"PAQUETE":10,"instrucciones_include_p":11,"declaraciones_p":12,"declaracion_variable":13,"tipo":14,"ID":15,"ASIGNACION":16,"expresion_multiple":17,"PUNTO_Y_COMA":18,"PR_INT":19,"PR_FLOAT":20,"PR_CHAR":21,"a3":22,"b3":23,"a3p":24,"a3bp":25,"OR":26,"XOR":27,"c3":28,"b3p":29,"b3bp":30,"AND":31,"d3":32,"c3p":33,"c3bp":34,"IGUAL":35,"NO_IGUAL":36,"MAYOR":37,"MENOR":38,"MAYOR_IGUAL":39,"MENOR_IGUAL":40,"e3":41,"d3p":42,"d3bp":43,"SUMA":44,"RESTA":45,"f3":46,"e3p":47,"e3bp":48,"MULTIPLICACION":49,"DIVISION":50,"MODULO":51,"g3":52,"f3p":53,"f3bp":54,"POTENCIA":55,"PARENT_A":56,"PARENT_C":57,"NOT":58,"BOOLEAN":59,"INT":60,"DOUBLE":61,"CHAR":62,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PR_INCLUDE",10:"PAQUETE",15:"ID",16:"ASIGNACION",18:"PUNTO_Y_COMA",19:"PR_INT",20:"PR_FLOAT",21:"PR_CHAR",26:"OR",27:"XOR",31:"AND",35:"IGUAL",36:"NO_IGUAL",37:"MAYOR",38:"MENOR",39:"MAYOR_IGUAL",40:"MENOR_IGUAL",44:"SUMA",45:"RESTA",49:"MULTIPLICACION",50:"DIVISION",51:"MODULO",55:"POTENCIA",56:"PARENT_A",57:"PARENT_C",58:"NOT",59:"BOOLEAN",60:"INT",61:"DOUBLE",62:"CHAR"},
productions_: [0,[3,2],[4,2],[8,2],[6,1],[6,0],[11,1],[11,2],[7,1],[7,0],[12,1],[12,2],[13,5],[14,1],[14,1],[14,1],[17,1],[22,2],[24,3],[24,0],[25,1],[25,1],[23,2],[29,3],[29,0],[30,1],[28,2],[33,3],[33,0],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[32,2],[42,3],[42,0],[43,1],[43,1],[41,2],[47,3],[47,0],[48,1],[48,1],[48,1],[46,2],[53,3],[53,0],[54,1],[52,3],[52,2],[52,2],[52,4],[52,1],[52,1],[52,1],[52,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 13:
 this.$ = yy.INT; 
break;
case 14:
 this.$ = yy.FLOAT; 
break;
case 15:
 this.$ = yy.CHAR; 
break;
case 16:
 this.$ = $$[$0]; 
break;
case 17: case 22: case 26: case 35: case 40: case 46:

                this.$ = produccion(yy,$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
            
break;
case 18: case 23: case 27: case 36: case 41: case 47:

                        this.$ = produccionPrima(yy,$$[$0-2],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
                    
break;
case 19: case 24: case 28: case 37: case 42: case 48:
 this.$ = null; 
break;
case 20:
 this.$ = yy.OR; 
break;
case 21:
 this.$ = yy.XOR; 
break;
case 25:
 this.$ = yy.AND; 
break;
case 29:
 this.$ = yy.IGUAL; 
break;
case 30:
 this.$ = yy.NO_IGUAL; 
break;
case 31:
 this.$ = yy.MAYOR; 
break;
case 32:
 this.$ = yy.MENOR; 
break;
case 33:
 this.$ = yy.MAYOR_IGUAL; 
break;
case 34:
 this.$ = yy.MENOR_IGUAL; 
break;
case 38:
 this.$ = yy.SUMA; 
break;
case 39:
 this.$ = yy.RESTA; 
break;
case 43:
 this.$ = yy.MULTIPLICACION; 
break;
case 44:
 this.$ = yy.DIVISION; 
break;
case 45:
 this.$ = yy.MODULO; 
break;
case 49:
 this.$ = yy.POTENCIA; 
break;
case 50:
 this.$ = $$[$0-1]; 
break;
case 51:

        let simbolo = obtenerSimbolo($$[$0]);
        if(simbolo==null){
            errorSemantico("No se encuentra el símbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
            this.$ = null;
        }else{
            if(simbolo.tipo==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+simbolo.tipo+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 52:

        operacion = new Object();
        operacion.tipoResultado = yy.BOOLEAN;
        this.$ = operacion;
    
break;
case 53:

        if($$[$0-1]==null){
            this.$ = null;
        }else{
            if($$[$0-1].tipoResultado==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 54:

                    operacion = new Object();
                    operacion.tipoResultado = yy.INT;
                    this.$ = operacion;
                
break;
case 55:

                    operacion = new Object();
                    operacion.tipoResultado = yy.DOUBLE;
                    this.$ = operacion;
                
break;
case 56:

                    operacion = new Object();
                    operacion.tipoResultado = yy.CHAR;
                    this.$ = operacion;
                
break;
case 57:

                    operacion = new Object();
                    let sim_id_a = validarVariable($$[$0],yy);
                    if(sim_id_a==null){
                        errorSemantico("No se encuentra el símbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
                        operacion.tipoResultado = yy.ID;
                    }else{
                        operacion.tipoResultado = sim_id_a.tipo;
                    }
                    this.$ = operacion;
                
break;
}
},
table: [o($V0,[2,5],{3:1,4:2,6:3,11:4,8:5,9:$V1}),{1:[3]},{5:[1,7]},{5:[2,9],7:8,12:9,13:10,14:11,19:$V2,20:$V3,21:$V4},o($V0,[2,4]),o($V0,[2,6],{8:5,11:15,9:$V1}),{10:[1,16]},{1:[2,1]},{5:[2,2]},{5:[2,8]},{5:[2,10],12:17,13:10,14:11,19:$V2,20:$V3,21:$V4},{15:[1,18]},{15:[2,13]},{15:[2,14]},{15:[2,15]},o($V0,[2,7]),o([5,9,19,20,21],[2,3]),{5:[2,11]},{16:[1,19]},{15:$V5,17:20,22:21,23:22,28:23,32:24,41:25,46:26,52:27,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va},{18:[1,34]},{18:[2,16]},o($Vb,$Vc,{24:35,25:36,26:$Vd,27:$Ve}),o($Vf,$Vg,{29:39,30:40,31:$Vh}),o($Vi,$Vj,{33:42,34:43,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp}),o($Vq,$Vr,{42:50,43:51,44:$Vs,45:$Vt}),o($Vu,$Vv,{47:54,48:55,49:$Vw,50:$Vx,51:$Vy}),o($Vz,$VA,{53:59,54:60,55:$VB}),{15:$V5,22:62,23:22,28:23,32:24,41:25,46:26,52:27,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va},{15:[1,63],56:[1,65],59:[1,64]},o($VC,[2,54]),o($VC,[2,55]),o($VC,[2,56]),o($VC,[2,57]),o($V0,[2,12]),o($Vb,[2,17]),{15:$V5,23:66,28:23,32:24,41:25,46:26,52:27,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va},o($VD,[2,20]),o($VD,[2,21]),o($Vf,[2,22]),{15:$V5,28:67,32:24,41:25,46:26,52:27,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va},o($VD,[2,25]),o($Vi,[2,26]),{15:$V5,32:68,41:25,46:26,52:27,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va},o($VD,[2,29]),o($VD,[2,30]),o($VD,[2,31]),o($VD,[2,32]),o($VD,[2,33]),o($VD,[2,34]),o($Vq,[2,35]),{15:$V5,41:69,46:26,52:27,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va},o($VD,[2,38]),o($VD,[2,39]),o($Vu,[2,40]),{15:$V5,46:70,52:27,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va},o($VD,[2,43]),o($VD,[2,44]),o($VD,[2,45]),o($Vz,[2,46]),{15:$V5,52:71,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va},o($VD,[2,49]),{57:[1,72]},o($VC,[2,51]),o($VC,[2,52]),{15:$V5,22:73,23:22,28:23,32:24,41:25,46:26,52:27,56:$V6,58:$V7,60:$V8,61:$V9,62:$Va},o($Vb,$Vc,{25:36,24:74,26:$Vd,27:$Ve}),o($Vf,$Vg,{30:40,29:75,31:$Vh}),o($Vi,$Vj,{34:43,33:76,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp}),o($Vq,$Vr,{43:51,42:77,44:$Vs,45:$Vt}),o($Vu,$Vv,{48:55,47:78,49:$Vw,50:$Vx,51:$Vy}),o($Vz,$VA,{54:60,53:79,55:$VB}),o($VC,[2,50]),{57:[1,80]},o($Vb,[2,18]),o($Vf,[2,23]),o($Vi,[2,27]),o($Vq,[2,36]),o($Vu,[2,41]),o($Vz,[2,47]),o($VC,[2,53])],
defaultActions: {7:[2,1],8:[2,2],9:[2,8],12:[2,13],13:[2,14],14:[2,15],17:[2,11],21:[2,16]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let errores = [];
    let tablaDeSimbolos = [];
    let ambitoActual = [];

    exports.getErrores = function (){
        return errores;
    }
        
    exports.reset = function(){
        errores.splice(0, errores.length);
        tablaDeSimbolos.splice(0, tablaDeSimbolos.length);
        ambitoActual.splice(0, ambitoActual.length);
    }

    function produccion(yy,$1,$2,linea,columna){
        try{
            if($2!=null){
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($1.tipoResultado,$2.tipoResultado,$2.operacionPendiente);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;
                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$2.operacionPendiente+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }else{
                return $1;
            }
        }catch(error){
            return null;
        }
    }

    function produccionPrima(yy,$1,$2,$3,linea,columna){
        try{
            if($3==null){
                operacion = new Object();
                operacion.tipoResultado = $2.tipoResultado;
                operacion.operacionPendiente = $1;
                return operacion;
            }else{
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($2.tipoResultado,$3.tipoResultado,$1);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;
                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$1+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }
        }catch(error){
            return null;
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*ignorar*/
break;
case 1: /*ignorar comentario de linea*/
break;
case 2: /*ignorar comentario de bloque*/
break;
case 3:return 'FLOAT'
break;
case 4:return 60
break;
case 5: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 6: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 10; 
break;
case 7:return 19
break;
case 8:return 20
break;
case 9:return 21
break;
case 10:return 9
break;
case 11:return 'PR_VOID'
break;
case 12:return 'PR_MAIN'
break;
case 13:return 'INCREMENTO'
break;
case 14:return 'DECREMENTO'
break;
case 15:return 44
break;
case 16:return 45
break;
case 17:return 49
break;
case 18:return 50
break;
case 19:return 51
break;
case 20:return 55
break;
case 21:return 'LLAVE_A'
break;
case 22:return 'LLAVE_C'
break;
case 23:return 'CORCH_A'
break;
case 24:return 'CORCH_C'
break;
case 25:return 56
break;
case 26:return 57
break;
case 27:return 27
break;
case 28:return 26
break;
case 29:return 31
break;
case 30:return 35
break;
case 31:return 36
break;
case 32:return 39
break;
case 33:return 40
break;
case 34:return 37
break;
case 35:return 38
break;
case 36:return 58
break;
case 37:return 18
break;
case 38:return 'DOS_PUNTOS'
break;
case 39:return 'COMA'
break;
case 40:return 16
break;
case 41:return 15
break;
case 42:return 5
break;
case 43:/*Instertar codigo para recuperar el error lexico*/
                //error
                ErrorLS = new Object();
                ErrorLS.lexema = yy_.yytext;
                ErrorLS.linea = yy_.yylloc.first_line;
                ErrorLS.columna = yy_.yylloc.first_column;
                ErrorLS.tipo = 'Léxico';
                ErrorLS.descripcion = 'El lexema '+yy_.yytext+' no es válido.';
                errores.push(ErrorLS);
        
break;
}
},
rules: [/^(?:[ \r\t\n]+)/,/^(?:[/][/].*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:'.')/,/^(?:"[^"]*")/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:#include\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:[+])/,/^(?:[-])/,/^(?:[*])/,/^(?:[/])/,/^(?:[%])/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\|\|)/,/^(?:\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z]+[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Programa;
exports.Parser = Programa.Parser;
exports.parse = function () { return Programa.parse.apply(Programa, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}