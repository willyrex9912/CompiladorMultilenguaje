/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Java = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,6],$V2=[2,5,12],$V3=[27,28,29,30,31,37],$V4=[2,30],$V5=[1,18],$V6=[1,19],$V7=[11,12,27,28,29,30,31,35,37],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[32,33],$Ve=[26,32,33],$Vf=[2,20],$Vg=[1,42],$Vh=[11,12,27,28,29,30,31,35,37,46],$Vi=[1,58],$Vj=[1,51],$Vk=[1,52],$Vl=[1,57],$Vm=[1,53],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,60],$Vr=[27,28,29,30,31],$Vs=[1,68],$Vt=[32,41],$Vu=[2,55],$Vv=[1,76],$Vw=[1,77],$Vx=[32,41,56,57],$Vy=[2,60],$Vz=[1,80],$VA=[32,41,56,57,61],$VB=[2,64],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[32,41,56,57,61,65,66,67,68,69,70],$VJ=[2,73],$VK=[1,91],$VL=[1,92],$VM=[32,41,56,57,61,65,66,67,68,69,70,74,75],$VN=[2,78],$VO=[1,95],$VP=[1,96],$VQ=[1,97],$VR=[32,41,56,57,61,65,66,67,68,69,70,74,75,79,80,81],$VS=[2,84],$VT=[1,100],$VU=[32,41,56,57,61,65,66,67,68,69,70,74,75,79,80,81,85],$VV=[11,12,27,28,29,30,31,35,46],$VW=[14,39,86,87,88,89,90,91],$VX=[1,135],$VY=[11,12,27,28,29,30,31,35,46,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicial":3,"a1":4,"EOF":5,"err":6,"declaracion_clase":7,"declaracion_clase_p":8,"LLAVE_A":9,"instrucciones_clase":10,"LLAVE_C":11,"PR_PUBLIC":12,"PR_CLASS":13,"ID":14,"instrucciones_clase_p":15,"declaracion_variable":16,"declaracion_metodo":17,"instrucciones_metodo":18,"instrucciones_metodo_p":19,"instruccion_if":20,"visibilidad":21,"tipo":22,"ids":23,"asignacion":24,"ids_p":25,"COMA":26,"PR_INT":27,"PR_DOUBLE":28,"PR_CHAR":29,"PR_STRING":30,"PR_BOOLEAN":31,"PUNTO_Y_COMA":32,"ASIGNACION":33,"expresion_multiple":34,"PR_PRIVATE":35,"declaracion_metodo_p":36,"PR_VOID":37,"declaracion_metodo_p_a":38,"PARENT_A":39,"parametros_b_p":40,"PARENT_C":41,"parametros":42,"parametros_p":43,"instruccion_if_b_p":44,"instruccion_if_p":45,"PR_IF":46,"instrucciones_else_if":47,"instruccion_else":48,"instruccion_else_if":49,"instruccion_else_if_b_p":50,"PR_ELSE":51,"a3":52,"b3":53,"a3p":54,"a3bp":55,"OR":56,"XOR":57,"c3":58,"b3p":59,"b3bp":60,"AND":61,"d3":62,"c3p":63,"c3bp":64,"IGUAL":65,"NO_IGUAL":66,"MAYOR":67,"MENOR":68,"MAYOR_IGUAL":69,"MENOR_IGUAL":70,"e3":71,"d3p":72,"d3bp":73,"SUMA":74,"RESTA":75,"f3":76,"e3p":77,"e3bp":78,"MULTIPLICACION":79,"DIVISION":80,"MODULO":81,"g3":82,"f3p":83,"f3bp":84,"POTENCIA":85,"NOT":86,"BOOLEAN":87,"INT":88,"DOUBLE":89,"CHAR":90,"STRING":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"LLAVE_A",11:"LLAVE_C",12:"PR_PUBLIC",13:"PR_CLASS",14:"ID",26:"COMA",27:"PR_INT",28:"PR_DOUBLE",29:"PR_CHAR",30:"PR_STRING",31:"PR_BOOLEAN",32:"PUNTO_Y_COMA",33:"ASIGNACION",35:"PR_PRIVATE",37:"PR_VOID",39:"PARENT_A",41:"PARENT_C",46:"PR_IF",51:"PR_ELSE",56:"OR",57:"XOR",61:"AND",65:"IGUAL",66:"NO_IGUAL",67:"MAYOR",68:"MENOR",69:"MAYOR_IGUAL",70:"MENOR_IGUAL",74:"SUMA",75:"RESTA",79:"MULTIPLICACION",80:"DIVISION",81:"MODULO",85:"POTENCIA",86:"NOT",87:"BOOLEAN",88:"INT",89:"DOUBLE",90:"CHAR",91:"STRING"},
productions_: [0,[3,2],[6,1],[4,1],[4,2],[7,4],[7,3],[7,1],[8,3],[10,1],[10,2],[15,1],[15,1],[18,1],[18,2],[19,1],[19,1],[16,4],[23,1],[23,3],[25,1],[22,1],[22,1],[22,1],[22,1],[22,1],[24,1],[24,3],[21,1],[21,1],[21,0],[17,3],[17,3],[36,4],[36,3],[38,4],[42,1],[42,3],[43,2],[40,1],[40,0],[20,4],[44,4],[45,1],[45,2],[45,1],[45,0],[47,1],[47,2],[49,3],[50,5],[48,3],[34,1],[52,2],[54,3],[54,0],[55,1],[55,1],[53,2],[59,3],[59,0],[60,1],[58,2],[63,3],[63,0],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[62,2],[72,3],[72,0],[73,1],[73,1],[71,2],[77,3],[77,0],[78,1],[78,1],[78,1],[76,2],[83,3],[83,0],[84,1],[82,3],[82,2],[82,2],[82,4],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                        for(const simbolo in tablaDeSimbolos){
                            console.log("-----------------");
                            console.log("Id: "+tablaDeSimbolos[simbolo].id);
                            console.log("Tipo: "+tablaDeSimbolos[simbolo].tipo);
                            console.log("Ambito: "+tablaDeSimbolos[simbolo].ambito);
                            console.log("Visibilidad: "+tablaDeSimbolos[simbolo].visibilidad);
                            console.log("Rol: "+tablaDeSimbolos[simbolo].rol);
                        }
                    
break;
case 2:

            //error
            ErrorLS = new Object();
            ErrorLS.lexema = yytext;
            ErrorLS.linea = this._$.first_line;
            ErrorLS.columna = this._$.first_column;
            ErrorLS.tipo = 'SintÃ¡ctico';
            ErrorLS.descripcion = '';
            errores.push(ErrorLS);
    
break;
case 5:

        ambitoActual.pop();
    
break;
case 6:
 ambitoActual.pop(); 
break;
case 8:

            if(existeClase($$[$0],yy)){
                errorSemantico("La clase "+$$[$0]+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
            }
            agregarSimbolo($$[$0],"","",yy.PUBLIC,yy.CLASE);
            ambitoActual.push("class "+$$[$0]);
        
break;
case 17:

            if($$[$0-3] != yy.DEFAULT){
                if(!ambitoClase){
                    errorSemantico("Ilegal inicio de expression: "+$$[$0-3]+".",this._$.first_line,this._$.first_column);
                }
            }
            //declaracion y asignacion
            if($$[$0]==null || $$[$0-2] == $$[$0].tipoResultado){
                while(ids.length>0){
                    //asignacion de tipo correcta
                    let id = ids.pop();
                    if(existeVariableMetodo(id,ambitoActual.at(-1),yy.VARIABLE)){
                        errorSemantico("La variable "+id+" ya ha sido declarada en "+ambitoActual.at(-1)+".",this._$.first_line,this._$.first_column);
                    }else{
                        if($$[$0] != null){
                            //simboloVariable.valor = $$[$0].valor;
                        }
                        agregarSimbolo(id,$$[$0-2],ambitoActual.at(-1),$$[$0-3],yy.VARIABLE);
                    }
                }
            }else{
                errorSemantico("Tipo de dato requerido : "+$$[$0-2]+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        
break;
case 20:
 ids.push($$[$0]); 
break;
case 21:
 this.$ = yy.INT; 
break;
case 22:
 this.$ = yy.DOUBLE; 
break;
case 23:
 this.$ = yy.CHAR; 
break;
case 24:
 this.$ = yy.STRING; 
break;
case 25:
 this.$ = yy.BOOLEAN; 
break;
case 26: case 55: case 60: case 64: case 73: case 78: case 84:
 this.$ = null; 
break;
case 27: case 86:
 this.$ = $$[$0-1]; 
break;
case 28:
 this.$ = yy.PUBLIC; 
break;
case 29:
 this.$ = yy.PRIVATE; 
break;
case 30:
 this.$ = yy.DEFAULT; 
break;
case 31:
 
        let ultimoMetodoDeclarado = obtenerUltimoMetodo(yy);
        ultimoMetodoDeclarado.visibilidad = $$[$0-2];
        ultimoMetodoDeclarado.tipo = $$[$0-1];
    
break;
case 32:

        let ultimoMetodoDeclarado1 = obtenerUltimoMetodo(yy);
        ultimoMetodoDeclarado1.visibilidad = $$[$0-2];
        ultimoMetodoDeclarado1.tipo = $$[$0-1];
    
break;
case 33:
 
        ambitoActual.pop(); 
        ambitoClase = true;
    
break;
case 34:
 
        ambitoActual.pop();
        ambitoClase = true; 
    
break;
case 35:

        if(existeVariableMetodo(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros,ambitoActual.at(-1),yy.METODO)){
            errorSemantico("El mÃ©todo "+$$[$0-3]+cadParametros+" ya ha sido declarado en "+ambitoActual.at(-1)+".",this._$.first_line,this._$.first_column);
        }
        agregarSimbolo(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros,"",ambitoActual.at(-1),"",yy.METODO);
        
        ambitoActual.push(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros);
        ambitoClase = false;
        cadParametros = "";
    
break;
case 38:
 cadParametros+="_"+$$[$0-1]; 
break;
case 42: case 50:

        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(exception){
        }
    
break;
case 52:
 this.$ = $$[$0]; 
break;
case 53: case 58: case 62: case 71: case 76: case 82:

                this.$ = produccion(yy,$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
            
break;
case 54: case 59: case 63: case 72: case 77: case 83:

                        this.$ = produccionPrima(yy,$$[$0-2],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
                    
break;
case 56:
 this.$ = yy.OR; 
break;
case 57:
 this.$ = yy.XOR; 
break;
case 61:
 this.$ = yy.AND; 
break;
case 65:
 this.$ = yy.IGUAL; 
break;
case 66:
 this.$ = yy.NO_IGUAL; 
break;
case 67:
 this.$ = yy.MAYOR; 
break;
case 68:
 this.$ = yy.MENOR; 
break;
case 69:
 this.$ = yy.MAYOR_IGUAL; 
break;
case 70:
 this.$ = yy.MENOR_IGUAL; 
break;
case 74:
 this.$ = yy.SUMA; 
break;
case 75:
 this.$ = yy.RESTA; 
break;
case 79:
 this.$ = yy.MULTIPLICACION; 
break;
case 80:
 this.$ = yy.DIVISION; 
break;
case 81:
 this.$ = yy.MODULO; 
break;
case 85:
 this.$ = yy.POTENCIA; 
break;
case 87:

        let simbolo = obtenerSimbolo($$[$0]);
        if(simbolo==null){
            errorSemantico("No se encuentra el sÃ­mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
            this.$ = null;
        }else{
            if(simbolo.tipo==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+simbolo.tipo+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 88:

        operacion = new Object();
        operacion.tipoResultado = yy.BOOLEAN;
        this.$ = operacion;
    
break;
case 89:

        if($$[$0-1]==null){
            this.$ = null;
        }else{
            if($$[$0-1].tipoResultado==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 90:

                    operacion = new Object();
                    operacion.tipoResultado = yy.INT;
                    this.$ = operacion;
                
break;
case 91:

                    operacion = new Object();
                    operacion.tipoResultado = yy.DOUBLE;
                    this.$ = operacion;
                
break;
case 92:

                    operacion = new Object();
                    operacion.tipoResultado = yy.CHAR;
                    this.$ = operacion;
                
break;
case 93:

                    operacion = new Object();
                    operacion.tipoResultado = yy.STRING;
                    this.$ = operacion;
                
break;
case 94:

                    operacion = new Object();
                    operacion.tipoResultado = yy.BOOLEAN;
                    this.$ = operacion;
                
break;
case 95:

                    operacion = new Object();
                    operacion.tipoResultado = yy.ID;
                    this.$ = operacion;
                
break;
}
},
table: [{2:$V0,3:1,4:2,6:5,7:3,8:4,12:$V1},{1:[3]},{5:[1,8]},{2:$V0,4:9,5:[2,3],6:5,7:3,8:4,12:$V1},{9:[1,10]},o($V2,[2,7]),{13:[1,11]},o($V2,[2,2]),{1:[2,1]},{5:[2,4]},o($V3,$V4,{10:12,15:14,16:15,17:16,21:17,11:[1,13],12:$V5,35:$V6}),{14:[1,20]},{11:[1,21]},o($V2,[2,6]),o($V3,$V4,{15:14,16:15,17:16,21:17,10:22,11:[2,9],12:$V5,35:$V6}),o($V7,[2,11]),o($V7,[2,12]),{22:23,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,37:[1,24]},o($V3,[2,28]),o($V3,[2,29]),{9:[2,8]},o($V2,[2,5]),{11:[2,10]},{14:[1,34],23:30,25:32,36:31,38:33},{14:[1,36],36:35,38:33},{14:[2,21]},{14:[2,22]},{14:[2,23]},{14:[2,24]},{14:[2,25]},{24:37,32:[1,38],33:[1,39]},o($V7,[2,31]),o($Vd,[2,18],{26:[1,40]}),{9:[1,41]},o($Ve,$Vf,{39:$Vg}),o($V7,[2,32]),{39:$Vg},o($Vh,[2,17]),o($Vh,[2,26]),{14:$Vi,34:43,39:$Vj,52:44,53:45,58:46,62:47,71:48,76:49,82:50,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{14:$Vq,23:59,25:32},o($Vr,$V4,{18:61,19:63,16:64,20:65,21:66,44:67,11:[1,62],12:$V5,35:$V6,46:$Vs}),{22:72,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,40:69,41:[2,40],42:70,43:71},{32:[1,73]},o($Vt,[2,52]),o($Vt,$Vu,{54:74,55:75,56:$Vv,57:$Vw}),o($Vx,$Vy,{59:78,60:79,61:$Vz}),o($VA,$VB,{63:81,64:82,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),o($VI,$VJ,{72:89,73:90,74:$VK,75:$VL}),o($VM,$VN,{77:93,78:94,79:$VO,80:$VP,81:$VQ}),o($VR,$VS,{83:98,84:99,85:$VT}),{14:$Vi,39:$Vj,52:101,53:45,58:46,62:47,71:48,76:49,82:50,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{14:[1,102],39:[1,104],87:[1,103]},o($VU,[2,90]),o($VU,[2,91]),o($VU,[2,92]),o($VU,[2,93]),o($VU,[2,94]),o($VU,[2,95]),o($Vd,[2,19]),o($Ve,$Vf),{11:[1,105]},o($V7,[2,34]),o($Vr,$V4,{19:63,16:64,20:65,21:66,44:67,18:106,11:[2,13],12:$V5,35:$V6,46:$Vs}),o($VV,[2,15]),o($VV,[2,16]),{22:107,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc},{9:[1,108]},{39:[1,109]},{41:[1,110]},{41:[2,39]},{26:[1,111],41:[2,36]},{14:[1,112]},o($Vh,[2,27]),o($Vt,[2,53]),{14:$Vi,39:$Vj,53:113,58:46,62:47,71:48,76:49,82:50,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VW,[2,56]),o($VW,[2,57]),o($Vx,[2,58]),{14:$Vi,39:$Vj,58:114,62:47,71:48,76:49,82:50,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VW,[2,61]),o($VA,[2,62]),{14:$Vi,39:$Vj,62:115,71:48,76:49,82:50,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VW,[2,65]),o($VW,[2,66]),o($VW,[2,67]),o($VW,[2,68]),o($VW,[2,69]),o($VW,[2,70]),o($VI,[2,71]),{14:$Vi,39:$Vj,71:116,76:49,82:50,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VW,[2,74]),o($VW,[2,75]),o($VM,[2,76]),{14:$Vi,39:$Vj,76:117,82:50,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VW,[2,79]),o($VW,[2,80]),o($VW,[2,81]),o($VR,[2,82]),{14:$Vi,39:$Vj,82:118,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VW,[2,85]),{41:[1,119]},o($VU,[2,87]),o($VU,[2,88]),{14:$Vi,39:$Vj,52:120,53:45,58:46,62:47,71:48,76:49,82:50,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($V7,[2,33]),{11:[2,14]},{14:$Vq,23:30,25:32},{11:[1,121]},{14:$Vi,34:122,39:$Vj,52:44,53:45,58:46,62:47,71:48,76:49,82:50,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{9:[2,35]},{22:72,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,42:123,43:71},o([26,41],[2,38]),o($Vt,$Vu,{55:75,54:124,56:$Vv,57:$Vw}),o($Vx,$Vy,{60:79,59:125,61:$Vz}),o($VA,$VB,{64:82,63:126,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),o($VI,$VJ,{73:90,72:127,74:$VK,75:$VL}),o($VM,$VN,{78:94,77:128,79:$VO,80:$VP,81:$VQ}),o($VR,$VS,{84:99,83:129,85:$VT}),o($VU,[2,86]),{41:[1,130]},o($VV,[2,46],{45:131,47:132,48:133,49:134,50:136,51:$VX}),{41:[1,137]},{41:[2,37]},o($Vt,[2,54]),o($Vx,[2,59]),o($VA,[2,63]),o($VI,[2,72]),o($VM,[2,77]),o($VR,[2,83]),o($VU,[2,89]),o($VV,[2,41]),o($VV,[2,43],{50:136,48:138,49:139,51:$VX}),o($VV,[2,45]),o($VY,[2,47]),{9:[1,140],46:[1,141]},{9:[1,142]},{9:[2,42]},o($VV,[2,44]),o($VY,[2,48]),{11:[1,143]},{39:[1,144]},{11:[1,145]},o($VV,[2,51]),{14:$Vi,34:146,39:$Vj,52:44,53:45,58:46,62:47,71:48,76:49,82:50,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VY,[2,49]),{41:[1,147]},{9:[2,50]}],
defaultActions: {8:[2,1],9:[2,4],20:[2,8],22:[2,10],25:[2,21],26:[2,22],27:[2,23],28:[2,24],29:[2,25],70:[2,39],106:[2,14],110:[2,35],123:[2,37],137:[2,42],147:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let errores = [];
    let tablaDeSimbolos = [];
    let ambitoActual = [];
    let ids = [];
    let cadParametros = "";
    let ambitoClase = true;

    exports.getErrores = function (){
        return errores;
    }

    exports.reset = function(){
        errores.splice(0, errores.length);
        tablaDeSimbolos.splice(0, tablaDeSimbolos.length);
        ambitoActual.splice(0, ambitoActual.length);
        ids.splice(0, ids.length);
        cadParametros = "";
        ambitoClase = true;
    }

    function errorSemantico(descripcion,linea,columna){
        ErrorLS = new Object();
        ErrorLS.lexema = "";
        ErrorLS.linea = linea;
        ErrorLS.columna = columna;
        ErrorLS.tipo = 'SemÃ¡ntico';
        ErrorLS.descripcion = descripcion;
        errores.push(ErrorLS);
    }

    function produccion(yy,$1,$2,linea,columna){
        if($2!=null){
            //Analizar tipo de resultado
            if($2!=null){
                let tipoResultado = yy.filtrarOperacion($1.tipoResultado,$2.tipoResultado,$2.operacionPendiente);
                if(tipoResultado!=null){
                    operacion = new Object();
                    operacion.tipoResultado = tipoResultado;
                    operacion.operacionPendiente = $1;
                    return operacion;
                }else{
                    errorSemantico("Operandos incorrectos para el operador "+$2.operacionPendiente+" .",linea,columna);
                    return null;
                }
            }else{
                return null;
            }
        }else{
            return $1;
        }
    }

    function produccionPrima(yy,$1,$2,$3,linea,columna){
        if($3==null){
            operacion = new Object();
            operacion.tipoResultado = $2.tipoResultado;
            operacion.operacionPendiente = $1;
            return operacion;
        }else{
            //Analizar tipo de resultado
            if($2!=null){
                let tipoResultado = yy.filtrarOperacion($2.tipoResultado,$3.tipoResultado,$1);
                if(tipoResultado!=null){
                    operacion = new Object();
                    operacion.tipoResultado = tipoResultado;
                    operacion.operacionPendiente = $1;
                    return operacion;
                }else{
                    errorSemantico("Operandos incorrectos para el operador "+$1+" .",linea,columna);
                    return null;
                }
            }else{
                return null;
            }
        }
    }

    function existeVariableMetodo(id,ambito,rol){
        for(let simbolo in tablaDeSimbolos){
            if(tablaDeSimbolos[simbolo].rol==rol && tablaDeSimbolos[simbolo].id==id && ambito==tablaDeSimbolos[simbolo].ambito){
                return true;
            }
        }
        return false;
    }

    function existeClase(id,yy){
        for(let simbolo in tablaDeSimbolos){
            if(tablaDeSimbolos[simbolo].rol==yy.CLASE && tablaDeSimbolos[simbolo].id==id){
                return true;
            }
        }
        return false;
    }

    function obtenerSimbolo(id){
        for (let i=tablaDeSimbolos.length - 1; i >= 0; i--) {
            if(id==tablaDeSimbolos[i].id){
                return tablaDeSimbolos[i];
            }
        }
        return null;
    }

    function obtenerUltimoMetodo(yy){
        for (let i=tablaDeSimbolos.length - 1; i >= 0; i--) {
            if(tablaDeSimbolos[i].rol == yy.METODO){
                return tablaDeSimbolos[i];
            }
        }
        return null;
    }

    function agregarSimbolo(id,tipo,ambito,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = ambito;
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        tablaDeSimbolos.push(simboloNuevo);
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*ignorar*/
break;
case 1:return 89
break;
case 2:return 88
break;
case 3:return 87
break;
case 4: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 91; 
break;
case 5: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 90; 
break;
case 6:return 12
break;
case 7:return 35
break;
case 8:return 13
break;
case 9:return 37
break;
case 10:return 27
break;
case 11:return 28
break;
case 12:return 29
break;
case 13:return 31
break;
case 14:return 30
break;
case 15:return 46
break;
case 16:return 51
break;
case 17:return 74
break;
case 18:return 75
break;
case 19:return 79
break;
case 20:return 80
break;
case 21:return 81
break;
case 22:return 85
break;
case 23:return 9
break;
case 24:return 11
break;
case 25:return 'CORCH_A'
break;
case 26:return 'CORCH_C'
break;
case 27:return 39
break;
case 28:return 41
break;
case 29:return 57
break;
case 30:return 56
break;
case 31:return 61
break;
case 32:return 65
break;
case 33:return 66
break;
case 34:return 69
break;
case 35:return 70
break;
case 36:return 67
break;
case 37:return 68
break;
case 38:return 86
break;
case 39:return 32
break;
case 40:return 26
break;
case 41:return 33
break;
case 42:return 14
break;
case 43: /*ignorar comentario de linea*/
break;
case 44: /*ignorar comentario de bloque*/
break;
case 45:return 5
break;
case 46:/*Instertar codigo para recuperar el error lexico*/
            //error
            ErrorLS = new Object();
            ErrorLS.lexema = yy_.yytext;
            ErrorLS.linea = yy_.yylloc.first_line;
            ErrorLS.columna = yy_.yylloc.first_column;
            ErrorLS.tipo = 'LÃ©xico';
            ErrorLS.descripcion = 'El lexema '+yy_.yytext+' no es vÃ¡lido.';
            errores.push(ErrorLS);
    
break;
}
},
rules: [/^(?:[ \r\t\n]+)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:true|false\b)/,/^(?:"[^"]*")/,/^(?:'.')/,/^(?:public\b)/,/^(?:private\b)/,/^(?:class\b)/,/^(?:void\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:[+])/,/^(?:[-])/,/^(?:[*])/,/^(?:[/])/,/^(?:[%])/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\|\|)/,/^(?:\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z]+[a-zA-Z0-9_]*)/,/^(?:[/][/].*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Java;
exports.Parser = Java.Parser;
exports.parse = function () { return Java.parse.apply(Java, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}