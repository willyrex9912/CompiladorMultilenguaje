/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,73],$V1=[1,53],$V2=[1,35],$V3=[1,36],$V4=[1,37],$V5=[1,49],$V6=[1,50],$V7=[1,51],$V8=[1,52],$V9=[1,54],$Va=[1,55],$Vb=[1,45],$Vc=[1,46],$Vd=[1,47],$Ve=[1,59],$Vf=[1,69],$Vg=[1,70],$Vh=[1,71],$Vi=[1,74],$Vj=[1,75],$Vk=[1,76],$Vl=[1,77],$Vm=[5,7],$Vn=[1,103],$Vo=[1,108],$Vp=[5,7,13,16,19,44,45,46,47,48,49,50,51,52,53,54,55],$Vq=[1,118],$Vr=[1,121],$Vs=[5,7,13,16,19,24,44,45,46,47,48,49,50,51,52,53,54,55,81,105,170,173],$Vt=[5,7,13,16,19,24,44,45,46,47,48,49,50,51,52,53,54,55,81,99,101,105,170,173],$Vu=[1,124],$Vv=[5,7,13,16,19,24,44,45,46,47,48,49,50,51,52,53,54,55,81,99,101,105,125,170,173],$Vw=[1,126],$Vx=[5,7,13,16,19,24,44,45,46,47,48,49,50,51,52,53,54,55,81,99,101,105,125,128,170,173],$Vy=[1,137],$Vz=[1,138],$VA=[1,130],$VB=[1,131],$VC=[1,132],$VD=[1,133],$VE=[1,134],$VF=[1,135],$VG=[1,136],$VH=[1,139],$VI=[5,7,13,16,19,24,44,45,46,47,48,49,50,51,52,53,54,55,81,90,99,101,105,125,128,129,133,134,135,136,137,138,139,140,170,173],$VJ=[1,141],$VK=[5,7,13,16,19,24,44,45,46,47,48,49,50,51,52,53,54,55,81,90,99,101,105,125,128,129,133,134,135,136,137,138,139,140,143,170,173],$VL=[1,143],$VM=[5,7,13,16,19,24,44,45,46,47,48,49,50,51,52,53,54,55,81,90,99,101,105,125,128,129,133,134,135,136,137,138,139,140,143,146,170,173],$VN=[1,145],$VO=[5,7,13,16,19,24,44,45,46,47,48,49,50,51,52,53,54,55,81,90,99,101,105,125,128,129,133,134,135,136,137,138,139,140,143,146,149,170,173],$VP=[1,147],$VQ=[1,148],$VR=[5,7,13,16,19,24,44,45,46,47,48,49,50,51,52,53,54,55,81,90,99,101,105,125,128,129,133,134,135,136,137,138,139,140,143,146,149,152,153,170,173],$VS=[1,150],$VT=[1,151],$VU=[5,7,13,16,19,24,44,45,46,47,48,49,50,51,52,53,54,55,81,90,99,101,105,125,128,129,133,134,135,136,137,138,139,140,143,146,149,152,153,156,157,170,173],$VV=[1,153],$VW=[1,154],$VX=[1,155],$VY=[1,156],$VZ=[5,7,13,16,19,22,24,44,45,46,47,48,49,50,51,52,53,54,55,81,90,99,101,105,125,128,129,133,134,135,136,137,138,139,140,143,146,149,152,153,156,157,160,161,162,170,173],$V_=[1,163],$V$=[5,7,13,16,19,22,23,24,44,45,46,47,48,49,50,51,52,53,54,55,79,81,90,99,101,105,125,128,129,133,134,135,136,137,138,139,140,143,146,149,152,153,156,157,160,161,162,170,173],$V01=[5,7,90],$V11=[1,177],$V21=[1,180],$V31=[13,24],$V41=[11,42,129,156,157,164,167,168,169,172],$V51=[1,198],$V61=[5,7,24],$V71=[5,7,24,72,81],$V81=[1,201],$V91=[1,203],$Va1=[11,72],$Vb1=[11,156,157,164,167,168,169,172],$Vc1=[5,7,13,16,19,22,23,24,44,45,46,47,48,49,50,51,52,53,54,55,81,90,99,101,105,125,128,129,133,134,135,136,137,138,139,140,143,146,149,152,153,156,157,160,161,162,170,173],$Vd1=[1,232],$Ve1=[1,238],$Vf1=[1,247],$Vg1=[1,260],$Vh1=[1,261],$Vi1=[1,257],$Vj1=[1,258],$Vk1=[1,281],$Vl1=[1,307],$Vm1=[13,16],$Vn1=[13,16,19,24],$Vo1=[5,7,16],$Vp1=[5,7,16,24],$Vq1=[22,23],$Vr1=[2,19],$Vs1=[1,382],$Vt1=[5,101,108],$Vu1=[1,409],$Vv1=[99,105,170],$Vw1=[24,99,105,170,173],$Vx1=[1,418],$Vy1=[2,20],$Vz1=[5,101];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"file_input":4,"EOF":5,"file_input_head":6,"NEWLINE":7,"stmt":8,"funcdef":9,"def":10,"NAME":11,"parameters":12,":":13,"suite":14,"(":15,")":16,"varargslist":17,"fpdef":18,"=":19,"test":20,"varargslist_tail":21,"*":22,"**":23,",":24,"varargslist_head":25,"fplist":26,"fplist_tail":27,"simple_stmt":28,"compound_stmt":29,"small_stmt":30,"expr_stmt":31,"print_stmt":32,"del_stmt":33,"pass_stmt":34,"flow_stmt":35,"import_stmt":36,"global_stmt":37,"exec_stmt":38,"assert_stmt":39,"testlist":40,"augassign":41,"yield_expr":42,"expr_stmt_tail":43,"+=":44,"-=":45,"*=":46,"/=":47,"%=":48,"&=":49,"|=":50,"^=":51,"<<=":52,">>=":53,"**=":54,"//=":55,"print":56,"print_stmt_tail":57,"del":58,"exprlist":59,"pass":60,"break_stmt":61,"continue_stmt":62,"return_stmt":63,"raise_stmt":64,"yield_stmt":65,"break":66,"continue":67,"return":68,"raise":69,"import_name":70,"import_from":71,"import":72,"dotted_as_names":73,"from":74,"dotted_name":75,"import_from_tail":76,"dots":77,"import_as_names":78,".":79,"import_as_name":80,"as":81,"import_as_names_tail":82,"dotted_as_name":83,"dotted_as_names_tail":84,"dotted_name_tail":85,"global":86,"global_stmt_tail":87,"exec":88,"expr":89,"in":90,"assert":91,"if_stmt":92,"while_stmt":93,"for_stmt":94,"try_stmt":95,"with_stmt":96,"classdef":97,"decorated":98,"if":99,"if_stmt_tail":100,"else":101,"if_stmt_elif":102,"elif":103,"while":104,"for":105,"try":106,"try_except":107,"finally":108,"try_except_head":109,"except_clause":110,"except":111,"with":112,"with_item":113,"with_stmt_tail":114,"INDENT":115,"stmts":116,"testlist_safe":117,"old_test":118,"testlist_safe_tail":119,"or_test":120,"old_lambdef":121,"lambda":122,"and_test":123,"or_test_tail":124,"or":125,"not_test":126,"and_test_tail":127,"and":128,"not":129,"comparison":130,"comparison_tail":131,"comp_op":132,"<":133,">":134,"==":135,">=":136,"<=":137,"!=":138,"<>":139,"is":140,"xor_expr":141,"expr_tail":142,"|":143,"and_expr":144,"xor_expr_tail":145,"^":146,"shift_expr":147,"and_expr_tail":148,"&":149,"arith_expr":150,"shift_expr_tail":151,"<<":152,">>":153,"term":154,"arith_expr_tail":155,"+":156,"-":157,"factor":158,"term_tail":159,"/":160,"%":161,"//":162,"power":163,"~":164,"atom":165,"trailers":166,"NUMBER":167,"STRING":168,"[":169,"]":170,"listmaker":171,"{":172,"}":173,"dictorsetmaker":174,"listmaker_tail":175,"list_for":176,"trailer":177,"exprlist_tail":178,"dict_tail":179,"set_tail":180,"comp_for":181,"class":182,"testlist_tail":183,"list_iter":184,"list_if":185,"comp_iter":186,"comp_if":187,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"NEWLINE",10:"def",11:"NAME",13:":",15:"(",16:")",19:"=",22:"*",23:"**",24:",",42:"yield_expr",44:"+=",45:"-=",46:"*=",47:"/=",48:"%=",49:"&=",50:"|=",51:"^=",52:"<<=",53:">>=",54:"**=",55:"//=",56:"print",58:"del",60:"pass",66:"break",67:"continue",68:"return",69:"raise",72:"import",74:"from",79:".",81:"as",86:"global",88:"exec",90:"in",91:"assert",98:"decorated",99:"if",101:"else",103:"elif",104:"while",105:"for",106:"try",108:"finally",111:"except",112:"with",115:"INDENT",122:"lambda",125:"or",128:"and",129:"not",133:"<",134:">",135:"==",136:">=",137:"<=",138:"!=",139:"<>",140:"is",143:"|",146:"^",149:"&",152:"<<",153:">>",156:"+",157:"-",160:"/",161:"%",162:"//",164:"~",167:"NUMBER",168:"STRING",169:"[",170:"]",172:"{",173:"}",182:"class"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,1],[9,5],[12,2],[12,3],[17,1],[17,3],[17,2],[17,4],[17,2],[17,2],[17,5],[17,3],[17,3],[17,6],[25,2],[25,4],[25,3],[25,5],[21,2],[21,3],[21,4],[21,5],[21,3],[21,5],[18,1],[18,3],[26,1],[26,2],[26,2],[27,2],[27,3],[27,3],[8,1],[8,1],[28,1],[28,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[31,3],[31,3],[31,2],[43,2],[43,3],[43,2],[43,3],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[32,1],[32,2],[32,3],[32,3],[57,2],[57,3],[57,3],[33,2],[34,1],[35,1],[35,1],[35,1],[35,1],[35,1],[61,1],[62,1],[63,1],[63,2],[64,1],[64,2],[64,4],[64,6],[65,1],[36,1],[36,1],[70,2],[71,3],[71,4],[71,3],[76,2],[76,2],[76,4],[77,1],[77,2],[80,1],[80,3],[78,1],[78,2],[78,2],[82,2],[82,3],[82,3],[83,1],[83,3],[73,1],[73,2],[84,2],[84,3],[75,1],[75,2],[85,2],[85,3],[37,2],[37,2],[87,2],[87,3],[38,2],[38,4],[38,6],[39,2],[39,4],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[92,4],[92,5],[100,3],[100,4],[100,1],[102,4],[102,5],[93,4],[93,7],[94,6],[94,9],[95,4],[95,6],[107,1],[107,4],[107,4],[107,7],[109,3],[109,4],[110,1],[110,2],[110,4],[110,4],[96,4],[96,5],[114,2],[114,3],[113,1],[113,3],[14,2],[116,1],[116,2],[117,1],[117,2],[119,2],[119,3],[119,3],[118,1],[118,1],[121,3],[121,4],[20,1],[20,5],[120,1],[120,2],[124,2],[124,3],[123,1],[123,2],[127,2],[127,3],[126,2],[126,1],[130,1],[130,2],[131,2],[131,3],[132,1],[132,1],[132,1],[132,1],[132,1],[132,1],[132,1],[132,1],[132,2],[132,1],[132,2],[89,1],[89,2],[142,2],[142,3],[141,1],[141,2],[145,2],[145,3],[144,1],[144,2],[148,2],[148,3],[147,1],[147,2],[151,2],[151,2],[151,3],[151,3],[150,1],[150,2],[155,2],[155,2],[155,3],[155,3],[154,1],[154,2],[159,2],[159,2],[159,2],[159,2],[159,3],[159,3],[159,3],[159,3],[158,1],[158,2],[158,2],[158,2],[163,1],[163,2],[163,3],[163,4],[165,1],[165,1],[165,1],[165,2],[165,3],[165,2],[165,3],[171,1],[171,2],[171,2],[175,2],[175,3],[175,3],[177,2],[166,1],[166,2],[59,1],[59,2],[178,2],[178,3],[178,3],[174,3],[174,4],[174,1],[174,2],[174,2],[179,4],[179,5],[179,5],[180,2],[180,3],[180,3],[97,4],[97,6],[97,7],[40,1],[40,2],[183,2],[183,3],[183,3],[184,1],[184,1],[185,2],[185,3],[176,4],[176,5],[186,1],[186,1],[187,2],[187,3],[181,4],[181,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log( $$[$0] ) 
break;
case 6:
 
        var params = []
        $$[$0-2].forEach(function(p, i) {
            if ( p.args ) {
                $$[$0] = '\nvar ' + p.param + ' = [].slice.call(arguments,' + i + ');\n' + $$[$0];
                return
            } else if ( p.kargs ) {
                $$[$0] = '\nvar ' + p.param + ' = arguments[arguments.length-1]; (typeof ' + p.param + '!="object") && (' + p.param + '={});\n' + $$[$0];
                return
            }
            var code = '(typeof ' + p.param + ' == "undefined") && ';
            if ( p.default )
                code += '(' + p.param + ' = ' + p.default + ')'
            else
                code += '(throw new Error("Missing argument: ' + p.param + '"))'
            $$[$0] = code + ';\n' + $$[$0];
            params.push( p.param )
        })
        this.$ = 'var ' + $$[$0-3] + '=function(' + params.join( ',' ) + '){' + $$[$0] + '}' 
    
break;
case 7: case 77:
 this.$ = '' 
break;
case 8: case 35: case 100: case 109: case 252: case 254:
 this.$ = $$[$0-1] 
break;
case 9: case 23:
 this.$ = [{ param: $$[$0] }] 
break;
case 10: case 25:
 this.$ = [{ param: $$[$0-2], default: $$[$0] }] 
break;
case 11: case 27:
 this.$ = [{ param: $$[$0-1] }].concat( $$[$0] ) 
break;
case 12: case 28:
 this.$ = [{ param: $$[$0-3], default: $$[$0-1] }].concat( $$[$0] ) 
break;
case 13:
 this.$ = [{ param: $$[$0], args: true }] 
break;
case 14:
 this.$ = [{ param: $$[$0], kargs: true }] 
break;
case 15:
 this.$ = [{ param: $$[$0-3], args: true },{ param: $$[$0], kargs: true }] 
break;
case 16:
 this.$ = $$[$0-2].concat( [{ param: $$[$0], args: true }] ) 
break;
case 17:
 this.$ = $$[$0-2].concat( [{ param: $$[$0], kargs: true }] ) 
break;
case 18:
 this.$ = $$[$0-5].concat( [{ param: $$[$0-3], args: true }, { param: $$[$0], kargs: true }] ) 
break;
case 19: case 24:
 this.$ = [{ param: $$[$0-1] }] 
break;
case 20: case 26:
 this.$ = [{ param: $$[$0-3], default: $$[$0-1] }] 
break;
case 21:
 this.$ = [{ param: $$[$0-2] }].concat( $$[$0] ) 
break;
case 22:
 this.$ = [{ param: $$[$0-4], default: $$[$0-2] }].concat( $$[$0] ) 
break;
case 33: case 36:
 this.$ = $$[$0-1] + ',' + $$[$0] 
break;
case 34: case 99: case 108: case 115:
 this.$ = $$[$0] 
break;
case 50:
 
        if ( typeof $$[$0-1] == "function" ) {
            this.$ = $$[$0-2] + $$[$0-1]( $$[$0-2], $$[$0] )
        } else {
            this.$ = $$[$0-2] + $$[$0-1] + $$[$0]
        }
        
    
break;
case 52: case 53: case 73: case 102: case 118: case 119: case 171: case 172: case 182: case 183: case 186: case 192: case 193: case 207: case 208: case 211: case 212: case 215: case 216: case 219: case 220: case 221: case 225: case 226: case 227: case 231: case 232: case 233: case 234: case 241: case 242: case 243: case 245: case 251: case 253: case 258: case 261: case 263: case 265: case 266: case 277: case 284: case 285:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 54: case 75: case 120: case 174: case 184: case 194: case 209: case 213: case 217: case 222: case 223: case 228: case 229: case 236: case 237: case 238: case 239: case 260: case 268: case 279: case 287:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0] 
break;
case 67:
 
        this.$ = function(x, y) { return '=Math.pow(' + x + ',' + y + ')' } 
    
break;
case 68:
 
        this.$ = function(x,y) { return '=' + x + '/' + y } 
    
break;
case 69:
 console.log("imprime") 
break;
case 70:
 this.$ = 'console.log(' + $$[$0] + ')' 
break;
case 71:
 this.$ = 'console.log(' + $$[$0-1] + ')' 
break;
case 72:
 this.$ = 'console.log(' + $$[$0-1] + $$[$0] + ')' 
break;
case 74: case 173: case 259: case 267: case 278: case 286:
 this.$ = $$[$0-2] + $$[$0-1] 
break;
case 76:
 this.$ = 'delete ' + $$[$0] 
break;
case 86:
 this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 87:
 this.$ = 'throw new Error()' 
break;
case 88:
 this.$ = 'throw ' + $$[$0] 
break;
case 89:
 this.$ = 'throw new ' + $$[$0-2] + '(' + $$[$0] + ')' 
break;
case 90:
 this.$ = 'throw new ' + $$[$0-4] + '(' + $$[$0-2] + ')' 
break;
case 94:
 
        this.$ = $$[$0].map(function(i) {
            var path = i.path.replace( '.', '/' )
            return 'var ' + i.name + '=require("' + path + '");'
        }).join( '\n' )
    
break;
case 95:

        this.$ = $$[$0].map(function(i){
            var path = ( $$[$0-1] + '/' + i.path ).replace( '.', '/' )
            return 'var ' + i.name + '=require("' + path + '");' 
        }).join( '\n' )
    
break;
case 96:

        var base = $$[$0-2].replace( /\.\./g, '../' )
        if ( base[ base.length - 1 ] != '/' ) base += '/'
        this.$ = $$[$0].map(function(i){
            var path = ( $$[$0-1] + '/' + i.path ).replace( /\./g, '/' )
            path = base + path
            return 'var ' + i.name + '=require("' + path + '");' 
        }).join( '\n' )
    
break;
case 97:

        var base = $$[$0-1].replace( /\.\./g, '../' )
        if ( base[ base.length - 1 ] != '/' ) base += '/'
        this.$ = $$[$0].map(function(i){
            var path = i.path.replace( /\./g, '/' )
            path = base + path
            return 'var ' + i.name + '=require("' + path + '");' 
        }).join( '\n' )
    
break;
case 103: case 111:
 this.$ = [{ path: $$[$0], name: $$[$0] }] 
break;
case 104: case 112:
 this.$ = [{ path: $$[$0-2], name: $$[$0] }] 
break;
case 107: case 110: case 114: case 116:
 this.$ = $$[$0-1].concat( $$[$0] ) 
break;
case 128:

        this.$ = 'if (!(' + $$[$0] + ')) throw new Error("Assertion Error")'
    
break;
case 129:

        this.$ = 'if (!(' + $$[$0-2] + ')) throw new Error(' + $$[$0] + ')'
    
break;
case 138:
 this.$ = 'if(' + $$[$0-2] + '){' + $$[$0] + '}\n' 
break;
case 139:
 this.$ = 'if(' + $$[$0-3] + '){' + $$[$0-1] + '}' + $$[$0] 
break;
case 140:
 this.$ = 'else{' + $$[$0] + '}' 
break;
case 141:
 this.$ = $$[$0-3] + 'else{' + $$[$0] + '}' 
break;
case 143:
 this.$ = 'else if(' + $$[$0-2] + '){' + $$[$0] + '}' 
break;
case 144:
 this.$ = 'else if(' + $$[$0-3] + '){' + $$[$0-1] + '}' + $$[$0] 
break;
case 145:
 this.$ = 'while(' + $$[$0-2] + '){' + $$[$0] + '}' 
break;
case 146:
 this.$ = 'while(true){if(!(' + $$[$0-5] + ')){' + $$[$0] + ';break}' + $$[$0-3] + '}' 
break;
case 147:
 this.$ = $$[$0-2] + '.forEach(function(' + $$[$0-4] + '){' + $$[$0] + '}' 
break;
case 148:
 this.$ = $$[$0-5] + '.forEach(function(' + $$[$0-7] + '){' + $$[$0-3] + '}' 
break;
case 149:
 
        var rethrow = true
        this.$ = 'try{' + $$[$0-1] + '}catch(___py_exc){' + $$[$0].map(function( e, i ) {
                var name = e.name, suite = e.suite, type = e.type;
                if ( name ) suite = 'var ' + name + '=___py_exc;' + suite
                if ( !type ) {
                    rethrow = false
                    if ( i != $$[$0].length - 1 ) // last except-block
                        throw new Error( "SyntaxError: default 'except:' must be last" )
                    return ( i != 0 ) ? 'else{' + suite + '}' : suite;
                }
                suite = 'if(___py_exc instanceof ' + type + '){' + suite + '}'
                return ( ( i == 0 ) ? '' : 'else ' ) + suite
            }).join( '' ) 
            + ( ( rethrow ) ? 'else{throw ___py_exc}' : '' )
            + '}'
            + ( ( $$[$0].finally ) ? 'finally{' + $$[$0].finally + '}' : '' )
    
break;
case 150:
 this.$ = 'try{' + $$[$0-3] + '}finally{' + $$[$0] + '}' 
break;
case 152:
 $$[$0-3].else = $$[$0]; this.$ = $$[$0-3] 
break;
case 153:
 $$[$0-3].finally = $$[$0]; this.$ = $$[$0-3] 
break;
case 154:
 $$[$0-6].else = $$[$0-3]; $$[$0-6].finally = $$[$0]; this.$ = $$[$0-6] 
break;
case 155:
 $$[$0-2].suite = $$[$0]; this.$ = [ $$[$0-2] ] 
break;
case 156:
 $$[$0-3].suite = $$[$0-1]; this.$ = [ $$[$0-3] ].concat( $$[$0] ) 
break;
case 157:
 this.$ = {} 
break;
case 158:
 this.$ = { type: $$[$0] } 
break;
case 159: case 160:
 this.$ = { type: $$[$0-2], name: $$[$0] } 
break;
case 161:
 
        this.$ = '(function(' + $$[$0-2].as + '){' + $$[$0] + '})(' + $$[$0-2].name + ')' 
    
break;
case 162:

        $$[$0-3] = [ $$[$0-3] ].concat( $$[$0-2] )
        var as = $$[$0-3].map(function(i){ return i.as }).join( ',' )
        var name = $$[$0-3].map(function(i){ return i.name }).join( ',' )
        this.$ = '(function(' + as + '){' + $$[$0] + '})(' + name + ')' 
    
break;
case 163:
 this.$ = [ $$[$0] ] 
break;
case 164:
 this.$ = [ $$[$0-1] ].concat( $$[$0] ) 
break;
case 165:
 this.$ = { name: $$[$0], as: $$[$0] } 
break;
case 166:
 this.$ = { name: $$[$0-2], as: $$[$0-1] } 
break;
case 167:
 this.$ = 'cookies'
break;
case 169:
 this.$ = $$[$0-1] + ';\n' + $$[$0] 
break;
case 177:
 this.$ = 'function(){return ' + $$[$0] + '};' 
break;
case 178:
 this.$ = 'function(' + $$[$0-2] + '){return ' + $$[$0] + '};' 
break;
case 180:
 this.$ = '(('+$$[$0-2]+')?'+$$[$0-4]+':'+$$[$0] + ')' 
break;
case 187:
 this.$ = '&&' + $$[$0] 
break;
case 188:
 this.$ = '&&' + $$[$0-1] + $$[$0] 
break;
case 189:
 this.$ = '!' + $$[$0] 
break;
case 201:
 this.$ = '!=' 
break;
case 235:
 this.$ = '/' + $$[$0] 
break;
case 246:
 this.$ = 'Math.pow(' + $$[$0-2] + ',' + $$[$0] + ')' 
break;
case 247:
 this.$ = 'Math.pow(' + $$[$0-3] + $$[$0-2] + ',' + $$[$0] + ')' 
break;
case 255: case 271:
 this.$ = '[' + $$[$0] + ']' 
break;
case 256:
 this.$ = '[' + $$[$0-1] + $$[$0] + ']' 
break;
case 257:

        this.$ =  '(function(){var ___py_results=[];'
            + $$[$0].before
            + '___py_results.push(' + $$[$0-1] + ')'
            + $$[$0].after
            + 'return ___py_results})();'
    
break;
case 269:

        var items = [{k:$$[$0-2],v:$$[$0]}]
        var long = items.some(function(i){
            return (!i.k || !i.k.match( /['"\d]/) )
        });
        this.$ = ( long )
            ?   '[' + items.map(function(pair){
                    return '[' + pair.k + ',' + pair.v + ']'
                }) + ']'
                + '.reduce('
                + 'function(memo,i){'
                + 'memo[i[0]] = i[1];'
                + 'return memo'
                + '},{})'
            :   '{' + $$[$0-2] + $$[$0-1] + $$[$0] + '}'
    
break;
case 270:

        var items = [{k:$$[$0-3],v:$$[$0-1]}].concat($$[$0])
        var long = items.some(function(i){
            return (!i.k || !i.k.match( /['"\d]/) )
        });
        this.$ = ( long )
            ?   '[' + items.map(function(pair){
                    return '[' + pair.k + ',' + pair.v + ']'
                }) + ']'
                + '.reduce('
                + 'function(memo,i){'
                + 'memo[i[0]] = i[1];'
                + 'return memo'
                + '},{})'
            :   '{' + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] + '}'
    
break;
case 272:
  // http://stackoverflow.com/questions/13486479/how-to-get-an-array-of-unique-values-from-an-array-containing-duplicates-in-java
        this.$ =  '[' + $$[$0-1] + $$[$0] + '].filter(function(e,i,arr){'
            + 'return arr.lastIndexOf(e) === i'
            + '})'
    
break;
case 273:

        this.$ =  '(function(){var ___py_results=[];'
            + $$[$0].before
            + '___py_results.push(' + $$[$0-1] + ')'
            + $$[$0].after
            + 'return ___py_results})()'
            + '.filter(function(e,i,arr){'
            + 'return arr.lastIndexOf(e) === i'
            + '})'
    
break;
case 274:
 this.$ = [ { k: $$[$0-2], v: $$[$0] } ] 
break;
case 275:
 this.$ = [  {k: $$[$0-3], v: $$[$0-1] } ] 
break;
case 276:
 this.$ = [ { k: $$[$0-3], v: $$[$0-1] }].concat( $$[$0] ) 
break;
case 280:
 
        this.$ = 'var ' + $$[$0-2] + '=function ' + $$[$0-2] + '(){}'
    
break;
case 290: case 296:
 
        this.$ = {
            before: 'if(' + $$[$0] + '){',
            after: '}'
        }
    
break;
case 291: case 297:

        this.$ = {
            before: 'if(' + $$[$0-1] + '){' + $$[$0].before,
            after: $$[$0].after + '}'
        }
    
break;
case 292: case 298:
 
        this.$ = {
            before: $$[$0] + '.forEach(function(' + $$[$0-2] + '){',
            after: '});'
        }
    
break;
case 293: case 299:

        this.$ = {
            before: $$[$0-1] + '.forEach(function(' + $$[$0-3] + '){' + $$[$0].before,
            after: $$[$0].after + '});'
        }
    
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:[1,5],8:6,9:15,10:[1,32],11:$V0,20:48,28:7,29:8,30:9,31:18,32:19,33:20,34:21,35:22,36:23,37:24,38:25,39:26,40:34,42:$V1,56:$V2,58:$V3,60:$V4,61:38,62:39,63:40,64:41,65:42,66:$V5,67:$V6,68:$V7,69:$V8,70:43,71:44,72:$V9,74:$Va,86:$Vb,88:$Vc,89:61,91:$Vd,92:10,93:11,94:12,95:13,96:14,97:16,98:[1,17],99:[1,27],104:[1,28],105:[1,29],106:[1,30],112:[1,31],120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl,182:[1,33]},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,78]},{5:[2,4]},{5:[2,5]},{5:[2,37]},{5:[2,38]},{5:[2,39],7:[1,79]},{5:[2,130]},{5:[2,131]},{5:[2,132]},{5:[2,133]},{5:[2,134]},{5:[2,135]},{5:[2,136]},{5:[2,137]},o($Vm,[2,41]),o($Vm,[2,42]),o($Vm,[2,43]),o($Vm,[2,44]),o($Vm,[2,45]),o($Vm,[2,46]),o($Vm,[2,47]),o($Vm,[2,48]),o($Vm,[2,49]),{11:$V0,20:80,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,20:81,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,59:82,89:83,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{13:[1,84]},{11:$V0,20:86,89:61,113:85,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:[1,87]},{11:[1,88]},{19:$Vn,41:89,43:90,44:[1,91],45:[1,92],46:[1,93],47:[1,94],48:[1,95],49:[1,96],50:[1,97],51:[1,98],52:[1,99],53:[1,100],54:[1,101],55:[1,102]},o($Vm,[2,69],{120:56,123:57,126:58,130:60,89:61,141:62,144:63,147:64,150:65,154:66,158:67,163:68,165:72,20:104,11:$V0,129:$Ve,156:$Vf,157:$Vg,164:$Vh,167:$Vi,168:$Vj,169:$Vk,172:$Vl}),{11:$V0,59:105,89:83,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vm,[2,77]),o($Vm,[2,78]),o($Vm,[2,79]),o($Vm,[2,80]),o($Vm,[2,81]),o($Vm,[2,82]),o($Vm,[2,92]),o($Vm,[2,93]),{11:[1,106],24:$Vo,87:107},{11:$V0,89:109,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,20:110,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vp,[2,283],{183:111,24:[1,112]}),o($Vm,[2,83]),o($Vm,[2,84]),o($Vm,[2,85],{20:48,120:56,123:57,126:58,130:60,89:61,141:62,144:63,147:64,150:65,154:66,158:67,163:68,165:72,40:113,11:$V0,129:$Ve,156:$Vf,157:$Vg,164:$Vh,167:$Vi,168:$Vj,169:$Vk,172:$Vl}),o($Vm,[2,87],{120:56,123:57,126:58,130:60,89:61,141:62,144:63,147:64,150:65,154:66,158:67,163:68,165:72,20:114,11:$V0,129:$Ve,156:$Vf,157:$Vg,164:$Vh,167:$Vi,168:$Vj,169:$Vk,172:$Vl}),o($Vm,[2,91]),{11:$Vq,73:115,75:117,83:116},{11:$Vq,75:119,77:120,79:$Vr},o($Vs,[2,179],{99:[1,122]}),o($Vt,[2,181],{124:123,125:$Vu}),o($Vv,[2,185],{127:125,128:$Vw}),{11:$V0,89:61,126:127,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vx,[2,190]),o($Vx,[2,191],{131:128,132:129,90:$Vy,129:$Vz,133:$VA,134:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH}),o($VI,[2,206],{142:140,143:$VJ}),o($VK,[2,210],{145:142,146:$VL}),o($VM,[2,214],{148:144,149:$VN}),o($VO,[2,218],{151:146,152:$VP,153:$VQ}),o($VR,[2,224],{155:149,156:$VS,157:$VT}),o($VU,[2,230],{159:152,22:$VV,160:$VW,161:$VX,162:$VY}),o($VZ,[2,240]),{11:$V0,156:$Vf,157:$Vg,158:157,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,156:$Vf,157:$Vg,158:158,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,156:$Vf,157:$Vg,158:159,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($VZ,[2,244],{166:160,177:162,23:[1,161],79:$V_}),o($V$,[2,248]),o($V$,[2,249]),o($V$,[2,250]),{11:$V0,20:166,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,170:[1,164],171:165,172:$Vl},{11:$V0,20:169,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl,173:[1,167],174:168},{1:[2,3]},{11:$V0,20:48,28:170,30:9,31:18,32:19,33:20,34:21,35:22,36:23,37:24,38:25,39:26,40:34,42:$V1,56:$V2,58:$V3,60:$V4,61:38,62:39,63:40,64:41,65:42,66:$V5,67:$V6,68:$V7,69:$V8,70:43,71:44,72:$V9,74:$Va,86:$Vb,88:$Vc,89:61,91:$Vd,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{13:[1,171]},{13:[1,172]},{90:[1,173]},o($V01,[2,264],{178:174,24:[1,175]}),{7:$V11,14:176},{13:[1,178],24:$V21,114:179},o($V31,[2,165],{81:[1,181]}),{12:182,15:[1,183]},{13:[1,184],15:[1,185]},{11:$V0,20:48,40:186,42:[1,187],89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vm,[2,52]),o($V41,[2,57]),o($V41,[2,58]),o($V41,[2,59]),o($V41,[2,60]),o($V41,[2,61]),o($V41,[2,62]),o($V41,[2,63]),o($V41,[2,64]),o($V41,[2,65]),o($V41,[2,66]),o($V41,[2,67]),o($V41,[2,68]),{11:$V0,20:48,40:188,42:[1,189],89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vm,[2,70],{57:191,24:[1,190]}),o($Vm,[2,76]),o($Vm,[2,121]),o($Vm,[2,122]),{11:[1,192]},o($Vm,[2,125],{90:[1,193]}),o($Vm,[2,128],{24:[1,194]}),o($Vp,[2,284]),{11:$V0,20:195,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vm,[2,86]),o($Vm,[2,88],{24:[1,196]}),o($Vm,[2,94]),o($Vm,[2,113],{84:197,24:$V51}),o($V61,[2,111],{81:[1,199]}),o($V71,[2,117],{85:200,79:$V81}),{72:$V91,76:202},{11:$Vq,72:$V91,75:204,76:205},o($Va1,[2,101],{77:206,79:$Vr}),{11:$V0,89:61,120:207,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vt,[2,182]),{11:$V0,89:61,123:208,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vv,[2,186]),{11:$V0,89:61,126:209,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vx,[2,189]),o($Vx,[2,192]),{11:$V0,89:210,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vb1,[2,195]),o($Vb1,[2,196]),o($Vb1,[2,197]),o($Vb1,[2,198]),o($Vb1,[2,199]),o($Vb1,[2,200]),o($Vb1,[2,201]),o($Vb1,[2,202]),{90:[1,211]},o($Vb1,[2,204],{129:[1,212]}),o($VI,[2,207]),{11:$V0,141:213,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($VK,[2,211]),{11:$V0,144:214,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($VM,[2,215]),{11:$V0,147:215,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($VO,[2,219]),{11:$V0,150:216,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,150:217,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($VR,[2,225]),{11:$V0,154:218,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,154:219,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($VU,[2,231]),{11:$V0,156:$Vf,157:$Vg,158:220,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,156:$Vf,157:$Vg,158:221,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,156:$Vf,157:$Vg,158:222,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,156:$Vf,157:$Vg,158:223,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($VZ,[2,241]),o($VZ,[2,242]),o($VZ,[2,243]),o($VZ,[2,245],{23:[1,224]}),{11:$V0,156:$Vf,157:$Vg,158:225,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vc1,[2,262],{177:162,166:226,79:$V_}),{11:[1,227]},o($V$,[2,251]),{170:[1,228]},{24:[1,231],105:$Vd1,170:[2,255],175:229,176:230},o($V$,[2,253]),{173:[1,233]},{13:[1,234],24:[1,237],105:$Ve1,173:[2,271],180:235,181:236},{5:[2,40]},{7:$V11,14:239},{7:$V11,14:240},{11:$V0,20:48,40:241,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($V01,[2,265]),{11:$V0,89:242,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{107:243,108:[1,244],109:245,110:246,111:$Vf1},{115:[1,248]},{7:$V11,14:249},{13:[1,250]},{11:$V0,20:86,89:61,113:251,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,89:252,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{13:[1,253]},{11:$Vg1,15:$Vh1,16:[1,254],17:255,18:256,22:$Vi1,23:$Vj1,25:259},{7:$V11,14:262},{11:$V0,16:[1,263],20:48,40:264,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vm,[2,50]),o($Vm,[2,51]),o($Vm,[2,53],{43:265,19:$Vn}),o($Vm,[2,55],{43:266,19:$Vn}),o($Vm,[2,71],{120:56,123:57,126:58,130:60,89:61,141:62,144:63,147:64,150:65,154:66,158:67,163:68,165:72,20:267,11:$V0,129:$Ve,156:$Vf,157:$Vg,164:$Vh,167:$Vi,168:$Vj,169:$Vk,172:$Vl}),o($Vm,[2,72]),o($Vm,[2,123],{87:268,24:$Vo}),{11:$V0,20:269,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,20:270,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vp,[2,285],{183:272,24:[1,271]}),{11:$V0,20:273,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vm,[2,114]),{11:$Vq,75:117,83:274},{11:[1,275]},o($V71,[2,118]),{11:[1,276]},o($Vm,[2,95]),{11:$Vk1,15:[1,279],22:[1,277],78:278,80:280},{72:$V91,76:282},o($Vm,[2,97]),o($Va1,[2,102]),{101:[1,283]},o($Vt,[2,183],{124:284,125:$Vu}),o($Vv,[2,187],{127:285,128:$Vw}),o($Vx,[2,193],{132:129,131:286,90:$Vy,129:$Vz,133:$VA,134:$VB,135:$VC,136:$VD,137:$VE,138:$VF,139:$VG,140:$VH}),o($Vb1,[2,203]),o($Vb1,[2,205]),o($VI,[2,208],{142:287,143:$VJ}),o($VK,[2,212],{145:288,146:$VL}),o($VM,[2,216],{148:289,149:$VN}),o($VO,[2,220],{151:290,152:$VP,153:$VQ}),o($VO,[2,221],{151:291,152:$VP,153:$VQ}),o($VR,[2,226],{155:292,156:$VS,157:$VT}),o($VR,[2,227],{155:293,156:$VS,157:$VT}),o($VU,[2,232],{159:294,22:$VV,160:$VW,161:$VX,162:$VY}),o($VU,[2,233],{159:295,22:$VV,160:$VW,161:$VX,162:$VY}),o($VU,[2,234],{159:296,22:$VV,160:$VW,161:$VX,162:$VY}),o($VU,[2,235],{159:297,22:$VV,160:$VW,161:$VX,162:$VY}),{11:$V0,156:$Vf,157:$Vg,158:298,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($VZ,[2,246]),o($Vc1,[2,263]),o($V$,[2,261]),o($V$,[2,252]),{170:[2,256]},{170:[2,257]},{11:$V0,20:299,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,59:300,89:83,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($V$,[2,254]),{11:$V0,20:301,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{173:[2,272]},{173:[2,273]},{11:$V0,20:302,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,59:303,89:83,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{5:[2,138],100:304,101:[1,305],102:306,103:$Vl1},{5:[2,145],101:[1,308]},{13:[1,309]},o($V01,[2,266],{178:311,24:[1,310]}),{5:[2,149]},{13:[1,312]},{5:[2,151],101:[1,313],108:[1,314]},{13:[1,315]},{11:$V0,13:[2,157],20:316,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o([5,101,103,108,111],[2,167]),{5:[2,161]},{7:$V11,14:317},{13:[2,163],24:$V21,114:318},o($V31,[2,166]),{7:$V11,14:319},{13:[2,7]},{16:[1,320]},o($Vm1,[2,9],{21:322,19:[1,321],24:[1,323]}),{11:[1,324]},{11:[1,325]},{22:[1,326],23:[1,327]},o($Vn1,[2,29]),{11:$Vg1,15:$Vh1,18:329,26:328},{5:[2,280]},{13:[1,330]},{16:[1,331]},o($Vm,[2,54]),o($Vm,[2,56]),o($Vm,[2,73],{57:333,24:[1,332]}),o($Vm,[2,124]),o($Vm,[2,126],{24:[1,334]}),o($Vm,[2,129]),o($Vp,[2,286],{120:56,123:57,126:58,130:60,89:61,141:62,144:63,147:64,150:65,154:66,158:67,163:68,165:72,20:195,11:$V0,129:$Ve,156:$Vf,157:$Vg,164:$Vh,167:$Vi,168:$Vj,169:$Vk,172:$Vl}),o($Vp,[2,287]),o($Vm,[2,89],{24:[1,335]}),o($Vm,[2,115],{84:336,24:$V51}),o($V61,[2,112]),o($V71,[2,119],{85:337,79:$V81}),o($Vm,[2,98]),o($Vm,[2,99]),{11:$Vk1,78:338,80:280},o($Vo1,[2,105],{82:340,24:[1,339]}),o($Vp1,[2,103],{81:[1,341]}),o($Vm,[2,96]),{11:$V0,20:342,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vt,[2,184]),o($Vv,[2,188]),o($Vx,[2,194]),o($VI,[2,209]),o($VK,[2,213]),o($VM,[2,217]),o($VO,[2,222]),o($VO,[2,223]),o($VR,[2,228]),o($VR,[2,229]),o($VU,[2,236]),o($VU,[2,237]),o($VU,[2,238]),o($VU,[2,239]),o($VZ,[2,247]),{24:[1,343],170:[2,258],175:344},{90:[1,345]},{24:[1,347],173:[2,269],179:346},{24:[1,348],173:[2,277],180:349},{90:[1,350]},{5:[2,139]},{13:[1,351]},{5:[2,142],101:[1,352]},{11:$V0,20:353,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{13:[1,354]},{7:$V11,14:355},o($V01,[2,267],{141:62,144:63,147:64,150:65,154:66,158:67,163:68,165:72,89:242,11:$V0,156:$Vf,157:$Vg,164:$Vh,167:$Vi,168:$Vj,169:$Vk,172:$Vl}),o($V01,[2,268]),{7:$V11,14:356},{13:[1,357]},{13:[1,358]},{7:$V11,14:359},{13:[2,158],24:[1,361],81:[1,360]},{5:[2,162]},{13:[2,164]},{5:[2,6]},{13:[2,8]},{11:$V0,20:362,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vm1,[2,11]),o($Vq1,$Vr1,{25:363,18:364,11:$Vg1,15:$Vh1}),o($Vm1,[2,13],{24:[1,365]}),o($Vm1,[2,14]),{11:[1,366]},{11:[1,367]},{16:[1,368]},{16:[2,31],24:[1,369],27:370},{7:$V11,14:371},{13:[1,372]},o($Vm,[2,74],{120:56,123:57,126:58,130:60,89:61,141:62,144:63,147:64,150:65,154:66,158:67,163:68,165:72,20:267,11:$V0,129:$Ve,156:$Vf,157:$Vg,164:$Vh,167:$Vi,168:$Vj,169:$Vk,172:$Vl}),o($Vm,[2,75]),{11:$V0,20:373,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,20:374,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vm,[2,116]),o($V71,[2,120]),{16:[1,375]},o($Vo1,[2,106],{80:376,11:$Vk1}),o($Vo1,[2,107]),{11:[1,377]},o($Vs,[2,180]),{11:$V0,20:299,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,170:[2,259],172:$Vl},{170:[2,260]},{11:$V0,89:61,117:378,118:379,120:380,121:381,122:$Vs1,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{173:[2,270]},{11:$V0,20:383,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,20:302,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl,173:[2,278]},{173:[2,279]},{11:$V0,89:61,120:384,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{7:$V11,14:385},{13:[1,386]},{13:[1,387]},{7:$V11,14:388},{5:[2,147],101:[1,389]},{5:[2,150]},{7:$V11,14:390},{7:$V11,14:391},o($Vt1,[2,155],{110:246,109:392,111:$Vf1}),{11:$V0,20:393,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,20:394,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vm1,[2,10],{21:395,24:[1,396]}),o($Vq1,[2,21]),o($Vm1,[2,23],{21:399,19:[1,398],24:[1,397]}),{23:[1,400]},o($Vm1,[2,16],{24:[1,401]}),o($Vm1,[2,17]),o($Vn1,[2,30]),{11:$Vg1,15:$Vh1,16:[2,32],18:402},{16:[2,33]},{5:[2,281]},{7:$V11,14:403},o($Vm,[2,127]),o($Vm,[2,90]),o($Vm,[2,100]),o($Vo1,[2,108],{82:405,24:[1,404]}),o($Vp1,[2,104]),{99:$Vu1,105:$Vd1,170:[2,292],176:407,184:406,185:408},o($Vv1,[2,170],{119:410,24:[1,411]}),o($Vw1,[2,175]),o($Vw1,[2,176]),{11:$Vg1,13:[1,412],15:$Vh1,17:413,18:256,22:$Vi1,23:$Vj1,25:259},{13:[1,414]},{99:$Vx1,105:$Ve1,173:[2,298],181:416,186:415,187:417},{5:[2,140]},{7:$V11,14:419},{7:$V11,14:420},{5:[2,146]},{13:[1,421]},{5:[2,152],108:[1,422]},{5:[2,153]},o($Vt1,[2,156]),{13:[2,159]},{13:[2,160]},o($Vm1,[2,12]),o($Vq1,$Vy1,{18:364,25:423,11:$Vg1,15:$Vh1}),o($Vm1,[2,24],{25:363,18:364,11:$Vg1,15:$Vh1,22:$Vr1,23:$Vr1}),{11:$V0,20:424,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vm1,[2,27]),{11:[1,425]},{23:[1,426]},{16:[2,34],24:[1,427],27:428},{5:[2,282]},o($Vo1,[2,109],{80:376,11:$Vk1}),o($Vo1,[2,110]),{170:[2,293]},{170:[2,288]},{170:[2,289]},{11:$V0,89:61,118:429,120:380,121:381,122:$Vs1,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},o($Vv1,[2,171]),{11:$V0,89:61,118:430,120:380,121:381,122:$Vs1,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{11:$V0,89:61,118:431,120:380,121:381,122:$Vs1,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{13:[1,432]},{11:$V0,20:433,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{173:[2,299]},{173:[2,294]},{173:[2,295]},{11:$V0,89:61,118:434,120:380,121:381,122:$Vs1,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{5:[2,141]},o($Vz1,[2,143],{102:435,103:$Vl1}),{7:$V11,14:436},{13:[1,437]},o($Vq1,[2,22]),o($Vm1,[2,25],{21:439,24:[1,438]}),o($Vm1,[2,15]),{11:[1,440]},{11:$Vg1,15:$Vh1,16:[2,35],18:402},{16:[2,36]},{99:$Vu1,105:$Vd1,170:[2,290],176:407,184:441,185:408},o($Vv1,[2,172],{119:443,24:[1,442]}),o($Vw1,[2,177]),{11:$V0,89:61,118:444,120:380,121:381,122:$Vs1,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl},{24:[1,445],173:[2,274],179:446},{99:$Vx1,105:$Ve1,173:[2,296],181:416,186:447,187:417},o($Vz1,[2,144]),{5:[2,148]},{7:$V11,14:448},o($Vm1,[2,26],{18:364,25:423,11:$Vg1,15:$Vh1,22:$Vy1,23:$Vy1}),o($Vm1,[2,28]),o($Vm1,[2,18]),{170:[2,291]},o($Vv1,[2,173],{123:57,126:58,130:60,89:61,141:62,144:63,147:64,150:65,154:66,158:67,163:68,165:72,120:380,121:381,118:430,11:$V0,122:$Vs1,129:$Ve,156:$Vf,157:$Vg,164:$Vh,167:$Vi,168:$Vj,169:$Vk,172:$Vl}),o($Vv1,[2,174]),o($Vw1,[2,178]),{11:$V0,20:383,89:61,120:56,123:57,126:58,129:$Ve,130:60,141:62,144:63,147:64,150:65,154:66,156:$Vf,157:$Vg,158:67,163:68,164:$Vh,165:72,167:$Vi,168:$Vj,169:$Vk,172:$Vl,173:[2,275]},{173:[2,276]},{173:[2,297]},{5:[2,154]}],
defaultActions: {2:[2,1],3:[2,2],5:[2,4],6:[2,5],7:[2,37],8:[2,38],10:[2,130],11:[2,131],12:[2,132],13:[2,133],14:[2,134],15:[2,135],16:[2,136],17:[2,137],78:[2,3],170:[2,40],229:[2,256],230:[2,257],235:[2,272],236:[2,273],243:[2,149],249:[2,161],254:[2,7],262:[2,280],304:[2,139],317:[2,162],318:[2,164],319:[2,6],320:[2,8],344:[2,260],346:[2,270],349:[2,279],356:[2,150],370:[2,33],371:[2,281],385:[2,140],388:[2,146],391:[2,153],393:[2,159],394:[2,160],403:[2,282],406:[2,293],407:[2,288],408:[2,289],415:[2,299],416:[2,294],417:[2,295],419:[2,141],428:[2,36],436:[2,148],441:[2,291],446:[2,276],447:[2,297],448:[2,154]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
 var indents = [0], indent = 0, dedents = 0 /* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5
break;
case 1: indent += 1 
break;
case 2: indent = ( indent + 8 ) & -7 
break;
case 3: indent = 0 // blank line 
break;
case 4: 
                                        this.unput( yy_.yytext )
                                        var last = indents[ indents.length - 1 ]
                                        if ( indent > last ) {
                                            this.begin( 'INLINE' )
                                            indents.push( indent )
                                            return 115
                                        } else if ( indent < last ) {
                                            this.begin( 'DEDENTS' )
                                            dedents = 0 // how many dedents occured
                                            while( last = indents.pop() ) {
                                                if ( last == indent ) break
                                                dedents += 1
                                            }
                                        } else {
                                            this.begin( 'INLINE' )
                                        }
                                    
break;
case 5:
                                        this.unput( yy_.yytext )
                                        if ( dedents-- > 0 ) {
                                            dedents -= 1
                                            return 'DEDENT'
                                            
                                        } else {
                                            this.begin( 'INLINE' )
                                        }
                                    
break;
case 6: 
                                        indent = 0; 
                                        this.begin( 'INITIAL' )
                                        return 7 
                                    
break;
case 7:/* skip whitespace, separate tokens */
break;
case 8: return yy_.yytext 
break;
case 9:return 167
break;
case 10:  
                                        // parseInt to convert to base-10
                                        var i = yy_.yytext.substr(2); // binary val
                                        yy_.yytext = 'parseInt("'+i+'",2)'
                                        return 167
                                    
break;
case 11:return 167
break;
case 12:  
                                        // escape string and convert to double quotes
                                        // http://stackoverflow.com/questions/770523/escaping-strings-in-javascript
                                        var str = yy_.yytext.substr(3, yy_.yytext.length-6)
                                            .replace( /[\\"']/g, '\\$&' )
                                            .replace(/\u0000/g, '\\0');
                                        yy_.yytext = '"' + str + '"'
                                        return 168
                                    
break;
case 13:return 168
break;
case 14:return 11
break;
}
},
rules: [/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:.)/,/^(?:.)/,/^(?:\n+)/,/^(?:[\ \t\f]+)/,/^(?:((continue|finally|return|global|assert|except|import|lambda|raise|class|print|break|while|yield|from|elif|else|with|pass|exec|and|del|not|def|for|try|as|or|if|in|is\b)|(>>=|<<=|\*\*=|\/\/=|\+=|-=|\*=|\/=|%=|&=|\|=|\^=|\*\*|\/\/|<<|>>|<=|>=|==|!=|<>|\+|-|\*|\/|%|&|\||\^|~|<|>|\(|\)|\[|\]|\{|\}|@|,|:|\.|`|=|;|'|\|\|")))/,/^(?:(((([0-9])+|((([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-]([0-9])+))|((([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(0[b|B](([0|1])+)))/,/^(?:((([1-9]([0-9])*))|(0[x|X](([0-9])|[a-fA-F])+)|(0[o|O]?([0-7])+)))/,/^(?:(("""(([^\\])|(\\.))*""")|('''(([^\\])|(\\.))*''')))/,/^(?:(("(([^\\\n\"])|(\\.))*")|('(([^\\\n\'])|(\\.))*')))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|([0-9])|_)*))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4],"inclusive":true},"DEDENTS":{"rules":[0,5],"inclusive":true},"INLINE":{"rules":[0,6,7,8,9,10,11,12,13,14],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}