/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Java = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,6],$V2=[2,5,12],$V3=[35,36,37,38,39,47],$V4=[2,41],$V5=[1,18],$V6=[1,19],$V7=[11,12,35,36,37,38,39,45,47],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[17,40],$Ve=[17,34,40],$Vf=[2,27],$Vg=[1,42],$Vh=[1,58],$Vi=[1,51],$Vj=[1,52],$Vk=[1,57],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,60],$Vq=[35,36,37,38,39],$Vr=[1,74],$Vs=[1,80],$Vt=[1,81],$Vu=[1,82],$Vv=[1,78],$Vw=[1,83],$Vx=[1,76],$Vy=[1,84],$Vz=[17,51,90],$VA=[2,104],$VB=[1,91],$VC=[1,92],$VD=[17,51,90,101,102],$VE=[2,109],$VF=[1,95],$VG=[17,51,90,101,102,106],$VH=[2,113],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[1,103],$VO=[17,51,90,101,102,106,110,111,112,113,114,115],$VP=[2,122],$VQ=[1,106],$VR=[1,107],$VS=[17,51,90,101,102,106,110,111,112,113,114,115,119,120],$VT=[2,127],$VU=[1,110],$VV=[1,111],$VW=[1,112],$VX=[17,51,90,101,102,106,110,111,112,113,114,115,119,120,124,125,126],$VY=[2,133],$VZ=[1,115],$V_=[17,51,90,101,102,106,110,111,112,113,114,115,119,120,124,125,126,130],$V$=[2,13],$V01=[11,12,14,35,36,37,38,39,45,54,55,60,69,72,76,84,88,93,96],$V11=[14,49,131,132,133,134,135,136],$V21=[17,51],$V31=[1,161],$V41=[1,160],$V51=[11,93],$V61=[11,12,14,35,36,37,38,39,45,54,55,60,66,69,72,76,84,88,93,96],$V71=[1,209],$V81=[11,88,93];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicial":3,"a1":4,"EOF":5,"err":6,"declaracion_clase":7,"declaracion_clase_p":8,"LLAVE_A":9,"instrucciones_clase":10,"LLAVE_C":11,"PR_PUBLIC":12,"PR_CLASS":13,"ID":14,"instrucciones_clase_p":15,"declaracion_variable":16,"PUNTO_Y_COMA":17,"declaracion_metodo":18,"instrucciones_metodo":19,"instrucciones_metodo_p":20,"asignacion_variable":21,"instruccion_if":22,"ciclo_for":23,"ciclo_while":24,"ciclo_do_while":25,"instruccion_switch":26,"instruccion_print":27,"instruccion_println":28,"visibilidad":29,"tipo":30,"ids":31,"asignacion":32,"ids_p":33,"COMA":34,"PR_INT":35,"PR_DOUBLE":36,"PR_CHAR":37,"PR_STRING":38,"PR_BOOLEAN":39,"ASIGNACION":40,"expresion_multiple":41,"inc_dec":42,"INCREMENTO":43,"DECREMENTO":44,"PR_PRIVATE":45,"declaracion_metodo_p":46,"PR_VOID":47,"declaracion_metodo_p_a":48,"PARENT_A":49,"parametros_b_p":50,"PARENT_C":51,"parametros":52,"parametros_p":53,"PR_PRINT":54,"PR_PRINTLN":55,"instruccion_if_b_p":56,"fin_if":57,"instruccion_if_p":58,"inicio_if":59,"PR_IF":60,"instrucciones_else_if":61,"instruccion_else":62,"instruccion_else_if":63,"instruccion_else_if_b_p":64,"fin_else_if":65,"PR_ELSE":66,"inicio_else":67,"fin_else":68,"PR_DO":69,"inicio_do":70,"fin_do":71,"PR_WHILE":72,"parte_while":73,"fin_while":74,"inicio_while":75,"PR_FOR":76,"inicio_for":77,"ciclo_for_p":78,"fin_for":79,"primera_exp":80,"accion_posterior":81,"inicio_switch":82,"instruccion_switch_c_p":83,"PR_SWITCH":84,"instruccion_switch_t_p":85,"instruccion_switch_default":86,"instruccion_switch_b_p":87,"PR_CASE":88,"inicio_cas_sw":89,"DOS_PUNTOS":90,"instruccion_break":91,"fin_cas_sw":92,"PR_DEFAULT":93,"inicio_def_sw":94,"fin_def_sw":95,"PR_BREAK":96,"a3":97,"b3":98,"a3p":99,"a3bp":100,"OR":101,"XOR":102,"c3":103,"b3p":104,"b3bp":105,"AND":106,"d3":107,"c3p":108,"c3bp":109,"IGUAL":110,"NO_IGUAL":111,"MAYOR":112,"MENOR":113,"MAYOR_IGUAL":114,"MENOR_IGUAL":115,"e3":116,"d3p":117,"d3bp":118,"SUMA":119,"RESTA":120,"f3":121,"e3p":122,"e3bp":123,"MULTIPLICACION":124,"DIVISION":125,"MODULO":126,"g3":127,"f3p":128,"f3bp":129,"POTENCIA":130,"NOT":131,"BOOLEAN":132,"INT":133,"DOUBLE":134,"CHAR":135,"STRING":136,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"LLAVE_A",11:"LLAVE_C",12:"PR_PUBLIC",13:"PR_CLASS",14:"ID",17:"PUNTO_Y_COMA",34:"COMA",35:"PR_INT",36:"PR_DOUBLE",37:"PR_CHAR",38:"PR_STRING",39:"PR_BOOLEAN",40:"ASIGNACION",43:"INCREMENTO",44:"DECREMENTO",45:"PR_PRIVATE",47:"PR_VOID",49:"PARENT_A",51:"PARENT_C",54:"PR_PRINT",55:"PR_PRINTLN",60:"PR_IF",66:"PR_ELSE",69:"PR_DO",72:"PR_WHILE",76:"PR_FOR",84:"PR_SWITCH",88:"PR_CASE",90:"DOS_PUNTOS",93:"PR_DEFAULT",96:"PR_BREAK",101:"OR",102:"XOR",106:"AND",110:"IGUAL",111:"NO_IGUAL",112:"MAYOR",113:"MENOR",114:"MAYOR_IGUAL",115:"MENOR_IGUAL",119:"SUMA",120:"RESTA",124:"MULTIPLICACION",125:"DIVISION",126:"MODULO",130:"POTENCIA",131:"NOT",132:"BOOLEAN",133:"INT",134:"DOUBLE",135:"CHAR",136:"STRING"},
productions_: [0,[3,2],[6,1],[4,1],[4,2],[7,4],[7,3],[7,1],[8,3],[10,1],[10,2],[15,2],[15,1],[19,1],[19,2],[20,2],[20,2],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[16,4],[31,1],[31,3],[33,1],[30,1],[30,1],[30,1],[30,1],[30,1],[32,0],[32,2],[21,3],[21,2],[42,1],[42,1],[29,1],[29,1],[29,0],[18,3],[18,3],[46,4],[46,3],[48,4],[52,1],[52,3],[53,2],[50,1],[50,0],[27,5],[28,5],[22,6],[59,0],[57,0],[56,5],[58,1],[58,2],[58,1],[58,0],[61,1],[61,2],[63,5],[65,0],[64,5],[62,6],[67,0],[68,0],[25,11],[70,0],[71,0],[24,5],[73,5],[75,0],[74,0],[23,9],[77,0],[79,0],[78,5],[80,1],[80,1],[81,1],[81,0],[26,2],[82,4],[83,2],[83,3],[83,3],[83,4],[85,1],[85,2],[87,7],[89,0],[92,0],[86,5],[94,0],[95,0],[91,2],[91,0],[41,1],[97,2],[99,3],[99,0],[100,1],[100,1],[98,2],[104,3],[104,0],[105,1],[103,2],[108,3],[108,0],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[107,2],[117,3],[117,0],[118,1],[118,1],[116,2],[122,3],[122,0],[123,1],[123,1],[123,1],[121,2],[128,3],[128,0],[129,1],[127,3],[127,2],[127,2],[127,4],[127,1],[127,1],[127,1],[127,1],[127,1],[127,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                        for(const simbolo in getAmbitoActual()){
                            console.log("-----------------");
                            /*-w-console.log("Id: "+tablaDeSimbolos[simbolo].id);
                            console.log("Tipo: "+tablaDeSimbolos[simbolo].tipo);
                            console.log("Ambito: "+tablaDeSimbolos[simbolo].ambito);
                            console.log("Visibilidad: "+tablaDeSimbolos[simbolo].visibilidad);
                            console.log("Rol: "+tablaDeSimbolos[simbolo].rol);*/
                            console.log("Id: "+getAmbitoActual()[simbolo].id);
                            console.log("Tipo: "+getAmbitoActual()[simbolo].tipo);
                            console.log("Ambito: "+getAmbitoActual()[simbolo].ambito);
                            console.log("Visibilidad: "+getAmbitoActual()[simbolo].visibilidad);
                            console.log("Rol: "+getAmbitoActual()[simbolo].rol);
                        }
                    
break;
case 2:

            //error
            ErrorLS = new Object();
            ErrorLS.lexema = yytext;
            ErrorLS.linea = this._$.first_line;
            ErrorLS.columna = this._$.first_column;
            ErrorLS.tipo = 'Sint√°ctico';
            ErrorLS.descripcion = '';
            errores.push(ErrorLS);
    
break;
case 5:

        //-w-ambitoActual.pop();
        cerrarAmbito();
    
break;
case 6:
 
        //-w-ambitoActual.pop(); 
        cerrarAmbito();
    
break;
case 8:

            if(existeClase($$[$0],yy)){
                errorSemantico("La clase "+$$[$0]+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
            }
            agregarSimbolo($$[$0],"","",yy.PUBLIC,yy.CLASE);
            //-w-ambitoActual.push("class "+$$[$0]);
            nuevoAmbito();
        
break;
case 24:

            if($$[$0-3] != yy.DEFAULT){
                if(!ambitoClase){
                    errorSemantico("Ilegal inicio de expresi√≥n: "+$$[$0-3]+".",this._$.first_line,this._$.first_column);
                }
            }
            //declaracion y asignacion
            if($$[$0]==null || $$[$0-2] == $$[$0].tipoResultado){
                while(ids.length>0){
                    //asignacion de tipo correcta
                    let id = ids.pop();
                    //-w-if(existeSimbolo(id,ambitoActual.at(-1),yy.VARIABLE)){
                    if(existeSimbolo(id,yy.VARIABLE)){
                        errorSemantico("La variable "+id+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
                    }else{
                        if($$[$0] != null){
                            //simboloVariable.valor = $$[$0].valor;
                        }
                        //-w-agregarSimbolo(id,$$[$0-2],ambitoActual.at(-1),$$[$0-3],yy.VARIABLE);
                        agregarSimbolo(id,$$[$0-2],"",$$[$0-3],yy.VARIABLE);
                    }
                }
            }else{
                errorSemantico("Tipo de dato requerido : "+$$[$0-2]+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        
break;
case 27:
 ids.push($$[$0]); 
break;
case 28:
 this.$ = yy.INT; 
break;
case 29:
 this.$ = yy.DOUBLE; 
break;
case 30:
 this.$ = yy.CHAR; 
break;
case 31:
 this.$ = yy.STRING; 
break;
case 32:
 this.$ = yy.BOOLEAN; 
break;
case 33: case 104: case 109: case 113: case 122: case 127: case 133:
 this.$ = null; 
break;
case 34: case 101:
 this.$ = $$[$0]; 
break;
case 35:

        //validando id
        let simId = validarVariable($$[$0-2],yy);
        if(simId==null){
            errorSemantico("No se encuentra el s√≠mbolo "+$$[$0-2]+" .",this._$.first_line,this._$.first_column);
        }else{
            if(simId.tipo == $$[$0].tipoResultado){
                //asignacion exitosa;
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
            }else{
                errorSemantico("Tipo de dato requerido : "+simId.tipo+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }
    
break;
case 36:

        let simId_a = validarVariable($$[$0-1],yy);
        if(simId_a==null){
            errorSemantico("No se encuentra el s√≠mbolo "+$$[$0-1]+" .",this._$.first_line,this._$.first_column);
        }else{
            if(simId_a.tipo == yy.INT || simId_a.tipo == yy.DOUBLE){
                //asignacion exitosa;
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.INT+","+yy.DOUBLE+" . Obtenido: "+simId_a.tipo+" .",this._$.first_line,this._$.first_column);
            }
        }
    
break;
case 39:
 this.$ = yy.PUBLIC; 
break;
case 40:
 this.$ = yy.PRIVATE; 
break;
case 41:
 this.$ = yy.DEFAULT; 
break;
case 42:
 
        let ultimoMetodoDeclarado = obtenerUltimoMetodo(yy);
        ultimoMetodoDeclarado.visibilidad = $$[$0-2];
        ultimoMetodoDeclarado.tipo = $$[$0-1];
    
break;
case 43:

        let ultimoMetodoDeclarado1 = obtenerUltimoMetodo(yy);
        ultimoMetodoDeclarado1.visibilidad = $$[$0-2];
        ultimoMetodoDeclarado1.tipo = $$[$0-1];
    
break;
case 44:
 
        //-w-ambitoActual.pop(); 
        cerrarAmbito();
        ambitoClase = true;
    
break;
case 45:
 
        //-w-ambitoActual.pop();
        cerrarAmbito();
        ambitoClase = true; 
    
break;
case 46:

        //-w-if(existeSimbolo(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros,ambitoActual.at(-1),yy.METODO)){
        if(existeSimbolo($$[$0-3]+cadParametros,yy.METODO)){
            //-w-errorSemantico("El m√©todo "+$$[$0-3]+cadParametros+" ya ha sido declarado en "+ambitoActual.at(-1)+".",this._$.first_line,this._$.first_column);
            errorSemantico("El m√©todo "+$$[$0-3]+cadParametros+" ya ha sido declarado.",this._$.first_line,this._$.first_column);
        }
        //-w-agregarSimbolo(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros,"",ambitoActual.at(-1),"",yy.METODO);
        agregarSimbolo($$[$0-3]+cadParametros,"","","",yy.METODO);
        nuevoAmbito();
        
        //-w-ambitoActual.push(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros);
        ambitoClase = false;
        cadParametros = "";
        pushSimbolosParametros();
    
break;
case 49:
 
        cadParametros+="_"+$$[$0-1]; 
        if(simbolosParametros.some(w => w.id === $$[$0])){
            errorSemantico("La variable "+$$[$0]+" ya ha sido definida como par√°metro.",this._$.first_line,this._$.first_column);
        }else{
            agregarSimboloParametro($$[$0],$$[$0-1],yy.PRIVATE,yy.PARAMETRO);
        }
    
break;
case 52: case 53:


    
break;
case 54:

        yy.PILA_INS.sacar();
    
break;
case 55: case 71: case 75: case 78: case 94: case 97:
 nuevoAmbito(); 
break;
case 56: case 72: case 76: case 79: case 95: case 98:
 cerrarAmbito(); 
break;
case 57:

        try{
            if($$[$0-2].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-2].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }

            yy.PILA_INS.apilar(yy.nuevoIf($$[$0-1].instruccion));
        }catch(exception){
        }
    
break;
case 65: case 69:
 
        cerrarAmbito(); 
        yy.PILA_INS.sacar();
    
break;
case 66:

        nuevoAmbito();
        yy.PILA_INS.apilar(yy.nuevoElseIf($$[$0-1].instruccion));
        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(exception){
        }
    
break;
case 68:
 
        nuevoAmbito(); 
        yy.PILA_INS.apilar(yy.nuevoElse());
    
break;
case 70:

        try{
            if($$[$0-2].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-2].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(exception){
        }
    
break;
case 74:

        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(exception){
        }
    
break;
case 77:

        //-w-ambitoActual.pop();
    
break;
case 80:

        try{
            if($$[$0-2].tipoResultado!=yy.BOOLEAN){
            errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-2].tipoResultado+" .",this._$.first_line,this._$.first_column); 
            }
        }catch(e){
        }
    
break;
case 86:

        if($$[$0-1].tipoResultado == yy.DOUBLE || $$[$0-1].tipoResultado == yy.BOOLEAN){
            errorSemantico("Tipo de dato requerido : "+yy.INT+","+yy.CHAR+","+yy.STRING+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
        }
        tipoDatoSwtich = $$[$0-1].tipoResultado;
    
break;
case 93:

        if($$[$0-4].tipoResultado != tipoDatoSwtich){
            errorSemantico("Tipo de dato requerido : "+tipoDatoSwtich+" . Obtenido: "+$$[$0-4].tipoResultado+" .",this._$.first_line,this._$.first_column);
        }
    
break;
case 102: case 107: case 111: case 120: case 125: case 131:

                this.$ = produccion(yy,$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
            
break;
case 103: case 108: case 112: case 121: case 126: case 132:

                        this.$ = produccionPrima(yy,$$[$0-2],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
                    
break;
case 105:
 this.$ = yy.OR; 
break;
case 106:
 this.$ = yy.XOR; 
break;
case 110:
 this.$ = yy.AND; 
break;
case 114:
 this.$ = yy.IGUAL; 
break;
case 115:
 this.$ = yy.NO_IGUAL; 
break;
case 116:
 this.$ = yy.MAYOR; 
break;
case 117:
 this.$ = yy.MENOR; 
break;
case 118:
 this.$ = yy.MAYOR_IGUAL; 
break;
case 119:
 this.$ = yy.MENOR_IGUAL; 
break;
case 123:
 this.$ = yy.SUMA; 
break;
case 124:
 this.$ = yy.RESTA; 
break;
case 128:
 this.$ = yy.MULTIPLICACION; 
break;
case 129:
 this.$ = yy.DIVISION; 
break;
case 130:
 this.$ = yy.MODULO; 
break;
case 134:
 this.$ = yy.POTENCIA; 
break;
case 135:
 this.$ = $$[$0-1]; 
break;
case 136:

        let simbolo = obtenerSimbolo($$[$0]);
        if(simbolo==null){
            errorSemantico("No se encuentra el s√≠mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
            this.$ = null;
        }else{
            if(simbolo.tipo==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+simbolo.tipo+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 137:

        operacion = new Object();
        operacion.tipoResultado = yy.BOOLEAN;
        this.$ = operacion;
    
break;
case 138:

        if($$[$0-1]==null){
            this.$ = null;
        }else{
            if($$[$0-1].tipoResultado==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 139:

                    operacion = new Object();
                    operacion.tipoResultado = yy.INT;
                    this.$ = operacion;
                
break;
case 140:

                    operacion = new Object();
                    operacion.tipoResultado = yy.DOUBLE;
                    this.$ = operacion;
                
break;
case 141:

                    operacion = new Object();
                    operacion.tipoResultado = yy.CHAR;
                    this.$ = operacion;
                
break;
case 142:

                    operacion = new Object();
                    operacion.tipoResultado = yy.STRING;
                    this.$ = operacion;
                
break;
case 143:

                    operacion = new Object();
                    operacion.tipoResultado = yy.BOOLEAN;
                    this.$ = operacion;
                
break;
case 144:

                    operacion = new Object();
                    let sim_id_a = validarVariable($$[$0],yy);
                    if(sim_id_a==null){
                        errorSemantico("No se encuentra el s√≠mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
                        operacion.tipoResultado = yy.ID;
                    }else{
                        operacion.tipoResultado = sim_id_a.tipo;
                    }
                    this.$ = operacion;
                
break;
}
},
table: [{2:$V0,3:1,4:2,6:5,7:3,8:4,12:$V1},{1:[3]},{5:[1,8]},{2:$V0,4:9,5:[2,3],6:5,7:3,8:4,12:$V1},{9:[1,10]},o($V2,[2,7]),{13:[1,11]},o($V2,[2,2]),{1:[2,1]},{5:[2,4]},o($V3,$V4,{10:12,15:14,16:15,18:16,29:17,11:[1,13],12:$V5,45:$V6}),{14:[1,20]},{11:[1,21]},o($V2,[2,6]),o($V3,$V4,{15:14,16:15,18:16,29:17,10:22,11:[2,9],12:$V5,45:$V6}),{17:[1,23]},o($V7,[2,12]),{30:24,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,47:[1,25]},o($V3,[2,39]),o($V3,[2,40]),{9:[2,8]},o($V2,[2,5]),{11:[2,10]},o($V7,[2,11]),{14:[1,35],31:31,33:33,46:32,48:34},{14:[1,37],46:36,48:34},{14:[2,28]},{14:[2,29]},{14:[2,30]},{14:[2,31]},{14:[2,32]},{17:[2,33],32:38,40:[1,39]},o($V7,[2,42]),o($Vd,[2,25],{34:[1,40]}),{9:[1,41]},o($Ve,$Vf,{49:$Vg}),o($V7,[2,43]),{49:$Vg},{17:[2,24]},{14:$Vh,41:43,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},{14:$Vp,31:59,33:33},o($Vq,$V4,{19:61,20:63,16:64,21:65,22:66,23:67,24:68,25:69,26:70,27:71,28:72,29:73,56:75,73:77,82:79,11:[1,62],12:$V5,14:$Vr,45:$V6,54:$Vs,55:$Vt,60:$Vu,69:$Vv,72:$Vw,76:$Vx,84:$Vy}),{30:88,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,50:85,51:[2,51],52:86,53:87},{17:[2,34]},o($Vz,[2,101]),o($Vz,$VA,{99:89,100:90,101:$VB,102:$VC}),o($VD,$VE,{104:93,105:94,106:$VF}),o($VG,$VH,{108:96,109:97,110:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN}),o($VO,$VP,{117:104,118:105,119:$VQ,120:$VR}),o($VS,$VT,{122:108,123:109,124:$VU,125:$VV,126:$VW}),o($VX,$VY,{128:113,129:114,130:$VZ}),{14:$Vh,49:$Vi,97:116,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},{14:[1,117],49:[1,119],132:[1,118]},o($V_,[2,139]),o($V_,[2,140]),o($V_,[2,141]),o($V_,[2,142]),o($V_,[2,143]),o($V_,[2,144]),o($Vd,[2,26]),o($Ve,$Vf),{11:[1,120]},o($V7,[2,45]),o($Vq,$V4,{20:63,16:64,21:65,22:66,23:67,24:68,25:69,26:70,27:71,28:72,29:73,56:75,73:77,82:79,19:121,11:$V$,88:$V$,93:$V$,96:$V$,12:$V5,14:$Vr,45:$V6,54:$Vs,55:$Vt,60:$Vu,69:$Vv,72:$Vw,76:$Vx,84:$Vy}),{17:[1,122]},{17:[1,123]},o($V01,[2,17]),o($V01,[2,18]),o($V01,[2,19]),o($V01,[2,20]),o($V01,[2,21]),o($V01,[2,22]),o($V01,[2,23]),{30:124,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc},{40:[1,125],42:126,43:[1,127],44:[1,128]},{9:[1,129]},{49:[2,78],77:130},{9:[1,131]},{9:[2,71],70:132},{9:[1,134],83:133},{49:[1,135]},{49:[1,136]},{49:[2,55],59:137},{49:[2,75],75:138},{49:[1,139]},{51:[1,140]},{51:[2,50]},{34:[1,141],51:[2,47]},{14:[1,142]},o($Vz,[2,102]),{14:$Vh,49:$Vi,98:143,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},o($V11,[2,105]),o($V11,[2,106]),o($VD,[2,107]),{14:$Vh,49:$Vi,103:144,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},o($V11,[2,110]),o($VG,[2,111]),{14:$Vh,49:$Vi,107:145,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},o($V11,[2,114]),o($V11,[2,115]),o($V11,[2,116]),o($V11,[2,117]),o($V11,[2,118]),o($V11,[2,119]),o($VO,[2,120]),{14:$Vh,49:$Vi,116:146,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},o($V11,[2,123]),o($V11,[2,124]),o($VS,[2,125]),{14:$Vh,49:$Vi,121:147,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},o($V11,[2,128]),o($V11,[2,129]),o($V11,[2,130]),o($VX,[2,131]),{14:$Vh,49:$Vi,127:148,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},o($V11,[2,134]),{51:[1,149]},o($V_,[2,136]),o($V_,[2,137]),{14:$Vh,49:$Vi,97:150,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},o($V7,[2,44]),o([11,88,93,96],[2,14]),o($V01,[2,15]),o($V01,[2,16]),{14:$Vp,31:31,33:33},{14:$Vh,41:151,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},o($V21,[2,36]),o($V21,[2,37]),o($V21,[2,38]),o($Vq,$V4,{20:63,16:64,21:65,22:66,23:67,24:68,25:69,26:70,27:71,28:72,29:73,56:75,73:77,82:79,19:152,12:$V5,14:$Vr,45:$V6,54:$Vs,55:$Vt,60:$Vu,69:$Vv,72:$Vw,76:$Vx,84:$Vy}),{49:[1,153]},o($Vq,$V4,{20:63,16:64,21:65,22:66,23:67,24:68,25:69,26:70,27:71,28:72,29:73,56:75,73:77,82:79,19:154,12:$V5,14:$Vr,45:$V6,54:$Vs,55:$Vt,60:$Vu,69:$Vv,72:$Vw,76:$Vx,84:$Vy}),{9:[1,155]},o($V01,[2,85]),{11:[1,156],85:157,86:158,87:159,88:$V31,93:$V41},{14:$Vh,41:162,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},{14:$Vh,41:163,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},{49:[1,164]},{49:[1,165]},{14:$Vh,41:166,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},{9:[2,46]},{30:88,35:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,52:167,53:87},o([34,51],[2,49]),o($Vz,$VA,{100:90,99:168,101:$VB,102:$VC}),o($VD,$VE,{105:94,104:169,106:$VF}),o($VG,$VH,{109:97,108:170,110:$VI,111:$VJ,112:$VK,113:$VL,114:$VM,115:$VN}),o($VO,$VP,{118:105,117:171,119:$VQ,120:$VR}),o($VS,$VT,{123:109,122:172,124:$VU,125:$VV,126:$VW}),o($VX,$VY,{129:114,128:173,130:$VZ}),o($V_,[2,135]),{51:[1,174]},o($V21,[2,35]),{11:[1,175]},o($Vq,$V4,{29:73,78:176,80:177,16:178,21:179,12:$V5,14:$Vr,45:$V6}),{11:[1,180]},o($Vq,$V4,{20:63,16:64,21:65,22:66,23:67,24:68,25:69,26:70,27:71,28:72,29:73,56:75,73:77,82:79,19:181,12:$V5,14:$Vr,45:$V6,54:$Vs,55:$Vt,60:$Vu,69:$Vv,72:$Vw,76:$Vx,84:$Vy}),o($V01,[2,87]),{11:[1,182],86:183,93:$V41},{11:[1,184]},o($V51,[2,91],{87:159,85:185,88:$V31}),{90:[2,97],94:186},o($V11,[2,94],{89:187}),{51:[1,188]},{51:[1,189]},{14:$Vh,41:190,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},{14:$Vh,41:191,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},{51:[1,192]},{51:[2,48]},o($Vz,[2,103]),o($VD,[2,108]),o($VG,[2,112]),o($VO,[2,121]),o($VS,[2,126]),o($VX,[2,132]),o($V_,[2,138]),o($V61,[2,56],{57:193}),{51:[1,194]},{17:[1,195]},{17:[2,81]},{17:[2,82]},o($V01,[2,76],{74:196}),{11:[1,197]},o($V01,[2,88]),{11:[1,198]},o($V01,[2,89]),o($V51,[2,92]),{90:[1,199]},{14:$Vh,41:200,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},{17:[1,201]},{17:[1,202]},{51:[1,203]},{51:[1,204]},{9:[2,86]},o($V01,[2,61],{58:205,61:206,62:207,63:208,64:210,66:$V71}),{9:[1,211]},{14:$Vh,41:212,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},o($V01,[2,73]),{71:213,72:[2,72]},o($V01,[2,90]),o($Vq,$V4,{20:63,16:64,21:65,22:66,23:67,24:68,25:69,26:70,27:71,28:72,29:73,56:75,73:77,82:79,19:214,12:$V5,14:$Vr,45:$V6,54:$Vs,55:$Vt,60:$Vu,69:$Vv,72:$Vw,76:$Vx,84:$Vy}),{90:[1,215]},o($V01,[2,52]),o($V01,[2,53]),{9:[2,57]},{9:[2,74]},o($V01,[2,54]),o($V01,[2,58],{64:210,62:216,63:217,66:$V71}),o($V01,[2,60]),o($V61,[2,62]),{9:[2,68],60:[1,219],67:218},{9:[1,220]},o($Vq,$V4,{20:63,16:64,21:65,22:66,23:67,24:68,25:69,26:70,27:71,28:72,29:73,56:75,73:77,82:79,19:221,12:$V5,14:$Vr,45:$V6,54:$Vs,55:$Vt,60:$Vu,69:$Vv,72:$Vw,76:$Vx,84:$Vy}),{17:[1,222]},{72:[1,223]},{11:[2,98],95:224},o($Vq,$V4,{20:63,16:64,21:65,22:66,23:67,24:68,25:69,26:70,27:71,28:72,29:73,56:75,73:77,82:79,19:225,12:$V5,14:$Vr,45:$V6,54:$Vs,55:$Vt,60:$Vu,69:$Vv,72:$Vw,76:$Vx,84:$Vy}),o($V01,[2,59]),o($V61,[2,63]),{9:[1,226]},{49:[1,227]},o($Vq,$V4,{20:63,16:64,21:65,22:66,23:67,24:68,25:69,26:70,27:71,28:72,29:73,56:75,73:77,82:79,19:228,12:$V5,14:$Vr,45:$V6,54:$Vs,55:$Vt,60:$Vu,69:$Vv,72:$Vw,76:$Vx,84:$Vy}),{11:[1,229]},{14:$Vr,21:231,51:[2,84],81:230},{49:[1,232]},{11:[2,96]},o($V81,[2,100],{91:233,96:[1,234]}),o($Vq,$V4,{20:63,16:64,21:65,22:66,23:67,24:68,25:69,26:70,27:71,28:72,29:73,56:75,73:77,82:79,19:235,12:$V5,14:$Vr,45:$V6,54:$Vs,55:$Vt,60:$Vu,69:$Vv,72:$Vw,76:$Vx,84:$Vy}),{14:$Vh,41:236,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},{11:[1,237]},o($V01,[2,79],{79:238}),{51:[2,80]},{51:[2,83]},{14:$Vh,41:239,49:$Vi,97:44,98:45,103:46,107:47,116:48,121:49,127:50,131:$Vj,132:$Vk,133:$Vl,134:$Vm,135:$Vn,136:$Vo},o($V81,[2,95],{92:240}),{17:[1,241]},{11:[1,242]},{51:[1,243]},o($V61,[2,65],{65:244}),o($V01,[2,77]),{51:[1,245]},o($V81,[2,93]),o($V81,[2,99]),o($V01,[2,69],{68:246}),{9:[2,66]},o($V61,[2,64]),{17:[1,247]},o($V01,[2,67]),o($V01,[2,70])],
defaultActions: {8:[2,1],9:[2,4],20:[2,8],22:[2,10],26:[2,28],27:[2,29],28:[2,30],29:[2,31],30:[2,32],38:[2,24],43:[2,34],86:[2,50],140:[2,46],167:[2,48],178:[2,81],179:[2,82],192:[2,86],203:[2,57],204:[2,74],224:[2,96],230:[2,80],231:[2,83],243:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let errores = [];
    //-w-let tablaDeSimbolos = [];
    let tablasDeSimbolos = [];
    //-w-let ambitoActual = [];
    let ids = [];
    let simbolosParametros = [];
    let cadParametros = "";
    let ambitoClase = true;
    let tipoDatoSwtich = "";

    exports.getErrores = function (){
        return errores;
    }

    exports.reset = function(){
        errores.splice(0, errores.length);
        //-w-tablaDeSimbolos.splice(0, tablaDeSimbolos.length);
        tablasDeSimbolos.splice(0, tablasDeSimbolos.length);
        let tablaGlobal = [];
        tablasDeSimbolos.push(tablaGlobal);
        //-w-ambitoActual.splice(0, ambitoActual.length);
        ids.splice(0, ids.length);
        simbolosParametros.splice(0, simbolosParametros.length);
        cadParametros = "";
        ambitoClase = true;
        tipoDatoSwtich = "";
    }

    function nuevoAmbito(){
        let nuevaTabla = [];
        if(tablasDeSimbolos.length){
            nuevaTabla = tablasDeSimbolos.at(-1).slice();
        }
        tablasDeSimbolos.push(nuevaTabla);
    }

    function getAmbitoActual(){
        return tablasDeSimbolos.at(-1);
    }

    function cerrarAmbito(){
        tablasDeSimbolos.pop();
    }

    function errorSemantico(descripcion,linea,columna){
        ErrorLS = new Object();
        ErrorLS.lexema = "";
        ErrorLS.linea = linea;
        ErrorLS.columna = columna;
        ErrorLS.tipo = 'Sem√°ntico';
        ErrorLS.descripcion = descripcion;
        errores.push(ErrorLS);
    }

    function produccion(yy,$1,$2,linea,columna){
        try{
            if($2!=null){
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($1.tipoResultado,$2.tipoResultado,$2.operacionPendiente);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;
                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$2.operacionPendiente+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }else{
                return $1;
            }
        }catch(error){
            return null;
        }
    }

    function produccionPrima(yy,$1,$2,$3,linea,columna){
        try{
            if($3==null){
                operacion = new Object();
                operacion.tipoResultado = $2.tipoResultado;
                operacion.operacionPendiente = $1;
                return operacion;
            }else{
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($2.tipoResultado,$3.tipoResultado,$3.operacionPendiente);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;
                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$3.operacionPendiente+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }
        }catch(error){
            return null;
        }
    }

    //-w-function existeSimbolo(id,ambito,rol){
    function existeSimbolo(id,rol){
        //-w-for(let simbolo in tablaDeSimbolos){
        for(let simbolo in getAmbitoActual()){
            //-w-if(tablaDeSimbolos[simbolo].rol==rol && tablaDeSimbolos[simbolo].id==id && ambito==tablaDeSimbolos[simbolo].ambito){
            if(getAmbitoActual()[simbolo].rol==rol && getAmbitoActual()[simbolo].id==id){
                return true;
            }
        }
        return false;
    }

    function existeClase(id,yy){
        //-w-for(let simbolo in tablaDeSimbolos){
        for(let simbolo in getAmbitoActual()){
            //-w-if(tablaDeSimbolos[simbolo].rol==yy.CLASE && tablaDeSimbolos[simbolo].id==id){
            if(getAmbitoActual()[simbolo].rol==yy.CLASE && getAmbitoActual()[simbolo].id==id){
                return true;
            }
        }
        return false;
    }

    function obtenerSimbolo(id){
        //-w-for (let i=tablaDeSimbolos.length - 1; i >= 0; i--) {
        //-w-for (let i=tablaDeSimbolos.length - 1; i >= 0; i--) {
            //-w-if(id==tablaDeSimbolos[i].id){
                //-w-return tablaDeSimbolos[i];
        for (let i=getAmbitoActual().length - 1; i >= 0; i--) {
            if(id==getAmbitoActual()[i].id){
                return getAmbitoActual()[i];
            }
        }
        return null;
    }

    function obtenerUltimoMetodo(yy){
        /*-w-for (let i=tablaDeSimbolos.length - 1; i >= 0; i--) {
            if(tablaDeSimbolos[i].rol == yy.METODO){
                return tablaDeSimbolos[i];
            }
        }*/
        console.log(tablasDeSimbolos);
        for (let i=getAmbitoActual().length - 1; i >= 0; i--) {
            if(getAmbitoActual()[i].rol == yy.METODO){
                return getAmbitoActual()[i];
            }
        }
        return null;
    }

    function agregarSimbolo(id,tipo,ambito,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = ambito;
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        //-w-tablaDeSimbolos.push(simboloNuevo);
        getAmbitoActual().push(simboloNuevo);
    }

    function agregarSimboloParametro(id,tipo,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = "";
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        simbolosParametros.push(simboloNuevo);
    }

    function pushSimbolosParametros(){
        while(simbolosParametros.length>0){
            //-w-tablaDeSimbolos.push(simbolosParametros.pop());
            getAmbitoActual().push(simbolosParametros.pop());
            //-w-tablaDeSimbolos.at(-1).ambito = ambitoActual.at(-1);
        }
    }

    function validarVariable(id,yy){
        //-w-let tabla = tablaDeSimbolos.slice();
        let tabla = getAmbitoActual().slice();
        while(tabla.length>0){
            let sim = tabla.pop();
            if((sim.rol==yy.VARIABLE || sim.rol==yy.PARAMETRO) && sim.id==id){
                /*-w-let ambitos = ambitoActual.slice();
                while(ambitos.length>0){
                    if(sim.ambito==ambitos.pop()){
                        return sim;
                    }
                }*/
                return sim;
            }
        }
        return null;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*ignorar*/
break;
case 1: /*ignorar comentario de linea*/
break;
case 2: /*ignorar comentario de bloque*/
break;
case 3:return 134
break;
case 4:return 133
break;
case 5:return 132
break;
case 6: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 136; 
break;
case 7: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 135; 
break;
case 8:return 12
break;
case 9:return 45
break;
case 10:return 13
break;
case 11:return 47
break;
case 12:return 35
break;
case 13:return 36
break;
case 14:return 37
break;
case 15:return 39
break;
case 16:return 38
break;
case 17:return 60
break;
case 18:return 66
break;
case 19:return 76
break;
case 20:return 84
break;
case 21:return 88
break;
case 22:return 69
break;
case 23:return 72
break;
case 24:return 93
break;
case 25:return 96
break;
case 26:return 55
break;
case 27:return 54
break;
case 28:return 43
break;
case 29:return 44
break;
case 30:return 119
break;
case 31:return 120
break;
case 32:return 124
break;
case 33:return 125
break;
case 34:return 126
break;
case 35:return 130
break;
case 36:return 9
break;
case 37:return 11
break;
case 38:return 'CORCH_A'
break;
case 39:return 'CORCH_C'
break;
case 40:return 49
break;
case 41:return 51
break;
case 42:return 102
break;
case 43:return 101
break;
case 44:return 106
break;
case 45:return 110
break;
case 46:return 111
break;
case 47:return 114
break;
case 48:return 115
break;
case 49:return 112
break;
case 50:return 113
break;
case 51:return 131
break;
case 52:return 17
break;
case 53:return 90
break;
case 54:return 34
break;
case 55:return 40
break;
case 56:return 14
break;
case 57:return 5
break;
case 58:/*Instertar codigo para recuperar el error lexico*/
            //error
            ErrorLS = new Object();
            ErrorLS.lexema = yy_.yytext;
            ErrorLS.linea = yy_.yylloc.first_line;
            ErrorLS.columna = yy_.yylloc.first_column;
            ErrorLS.tipo = 'L√©xico';
            ErrorLS.descripcion = 'El lexema '+yy_.yytext+' no es v√°lido.';
            errores.push(ErrorLS);
    
break;
}
},
rules: [/^(?:[ \r\t\n]+)/,/^(?:[/][/].*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:true|false\b)/,/^(?:"[^"]*")/,/^(?:'.')/,/^(?:public\b)/,/^(?:private\b)/,/^(?:class\b)/,/^(?:void\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:[+])/,/^(?:[-])/,/^(?:[*])/,/^(?:[/])/,/^(?:[%])/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\|\|)/,/^(?:\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z]+[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Java;
exports.Parser = Java.Parser;
exports.parse = function () { return Java.parse.apply(Java, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}