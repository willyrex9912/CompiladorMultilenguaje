/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Programa = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[28,36,42,43,44],$V1=[1,8],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,26],$V7=[18,37],$V8=[2,11],$V9=[1,45],$Va=[1,51],$Vb=[1,52],$Vc=[1,50],$Vd=[1,53],$Ve=[1,48],$Vf=[1,63],$Vg=[1,68],$Vh=[1,64],$Vi=[1,65],$Vj=[1,66],$Vk=[1,67],$Vl=[27,67,72,75],$Vm=[27,36,41,42,43,44,51,63,67,72,75,76,79,83],$Vn=[18,31,69],$Vo=[2,91],$Vp=[1,91],$Vq=[1,92],$Vr=[18,31,69,93,94],$Vs=[2,96],$Vt=[1,95],$Vu=[18,31,69,93,94,98],$Vv=[2,100],$Vw=[1,98],$Vx=[1,99],$Vy=[1,100],$Vz=[1,101],$VA=[1,102],$VB=[1,103],$VC=[18,31,69,93,94,98,102,103,104,105,106,107],$VD=[2,109],$VE=[1,106],$VF=[1,107],$VG=[18,31,69,93,94,98,102,103,104,105,106,107,111,112],$VH=[2,114],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[18,31,69,93,94,98,102,103,104,105,106,107,111,112,116,117,118],$VM=[2,120],$VN=[1,115],$VO=[18,31,69,93,94,98,102,103,104,105,106,107,111,112,116,117,118,122],$VP=[18,31],$VQ=[1,128],$VR=[1,127],$VS=[30,41,123,125,126,127],$VT=[27,72],$VU=[27,36,41,42,43,44,51,58,63,67,72,75,76,79,83],$VV=[1,180],$VW=[27,67,72];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicial":3,"a1":4,"EOF":5,"err":6,"instrucciones_include":7,"declaraciones":8,"metodo_principal":9,"include":10,"PR_INCLUDE":11,"PAQUETE":12,"instrucciones_include_p":13,"instrucciones":14,"instrucciones_p":15,"instrucciones_b_p":16,"declaracion_variable":17,"PUNTO_Y_COMA":18,"asignacion_variable":19,"instruccion_if":20,"instruccion_switch":21,"ciclo_for":22,"ciclo_while":23,"ciclo_do_while":24,"metodo_principal_p":25,"LLAVE_A":26,"LLAVE_C":27,"PR_VOID":28,"PR_MAIN":29,"PARENT_A":30,"PARENT_C":31,"declaraciones_p":32,"tipo":33,"ids":34,"asignacion":35,"PR_CONST":36,"ASIGNACION":37,"expresion_multiple":38,"ids_p":39,"COMA":40,"ID":41,"PR_INT":42,"PR_FLOAT":43,"PR_CHAR":44,"inc_dec":45,"INCREMENTO":46,"DECREMENTO":47,"instruccion_if_b_p":48,"fin_if":49,"instruccion_if_p":50,"PR_IF":51,"inicio_if":52,"instrucciones_else_if":53,"instruccion_else":54,"instruccion_else_if":55,"instruccion_else_if_b_p":56,"fin_else_if":57,"PR_ELSE":58,"inicio_else":59,"fin_else":60,"inicio_switch":61,"instruccion_switch_c_p":62,"PR_SWITCH":63,"instruccion_switch_t_p":64,"instruccion_switch_default":65,"instruccion_switch_b_p":66,"PR_CASE":67,"inicio_cas_sw":68,"DOS_PUNTOS":69,"instruccion_break":70,"fin_cas_sw":71,"PR_DEFAULT":72,"inicio_def_sw":73,"fin_def_sw":74,"PR_BREAK":75,"PR_DO":76,"inicio_do":77,"fin_do":78,"PR_WHILE":79,"parte_while":80,"fin_while":81,"inicio_while":82,"PR_FOR":83,"inicio_for":84,"ciclo_for_p":85,"fin_for":86,"primera_exp":87,"accion_posterior":88,"a3":89,"b3":90,"a3p":91,"a3bp":92,"OR":93,"XOR":94,"c3":95,"b3p":96,"b3bp":97,"AND":98,"d3":99,"c3p":100,"c3bp":101,"IGUAL":102,"NO_IGUAL":103,"MAYOR":104,"MENOR":105,"MAYOR_IGUAL":106,"MENOR_IGUAL":107,"e3":108,"d3p":109,"d3bp":110,"SUMA":111,"RESTA":112,"f3":113,"e3p":114,"e3bp":115,"MULTIPLICACION":116,"DIVISION":117,"MODULO":118,"g3":119,"f3p":120,"f3bp":121,"POTENCIA":122,"NOT":123,"BOOLEAN":124,"INT":125,"FLOAT":126,"CHAR":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"PR_INCLUDE",12:"PAQUETE",18:"PUNTO_Y_COMA",26:"LLAVE_A",27:"LLAVE_C",28:"PR_VOID",29:"PR_MAIN",30:"PARENT_A",31:"PARENT_C",36:"PR_CONST",37:"ASIGNACION",40:"COMA",41:"ID",42:"PR_INT",43:"PR_FLOAT",44:"PR_CHAR",46:"INCREMENTO",47:"DECREMENTO",51:"PR_IF",58:"PR_ELSE",63:"PR_SWITCH",67:"PR_CASE",69:"DOS_PUNTOS",72:"PR_DEFAULT",75:"PR_BREAK",76:"PR_DO",79:"PR_WHILE",83:"PR_FOR",93:"OR",94:"XOR",98:"AND",102:"IGUAL",103:"NO_IGUAL",104:"MAYOR",105:"MENOR",106:"MAYOR_IGUAL",107:"MENOR_IGUAL",111:"SUMA",112:"RESTA",116:"MULTIPLICACION",117:"DIVISION",118:"MODULO",122:"POTENCIA",123:"NOT",124:"BOOLEAN",125:"INT",126:"FLOAT",127:"CHAR"},
productions_: [0,[3,2],[6,1],[4,3],[4,1],[10,2],[7,1],[7,0],[13,1],[13,2],[14,1],[14,0],[15,1],[15,2],[16,2],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[9,4],[25,4],[8,1],[8,0],[32,2],[32,3],[17,3],[17,5],[34,1],[34,3],[39,1],[33,1],[33,1],[33,1],[35,0],[35,2],[19,3],[19,2],[45,1],[45,1],[20,6],[48,5],[52,0],[49,0],[50,1],[50,2],[50,1],[50,0],[53,1],[53,2],[55,5],[56,5],[57,0],[54,6],[59,0],[60,0],[21,2],[61,4],[62,2],[62,3],[62,3],[62,4],[64,1],[64,2],[66,7],[68,0],[71,0],[65,5],[73,0],[74,0],[70,2],[70,0],[24,11],[77,0],[78,0],[23,5],[80,5],[82,0],[81,0],[22,9],[84,0],[86,0],[85,5],[87,1],[87,1],[88,1],[88,0],[38,1],[89,2],[91,3],[91,0],[92,1],[92,1],[90,2],[96,3],[96,0],[97,1],[95,2],[100,3],[100,0],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[99,2],[109,3],[109,0],[110,1],[110,1],[108,2],[114,3],[114,0],[115,1],[115,1],[115,1],[113,2],[120,3],[120,0],[121,1],[119,3],[119,2],[119,2],[119,4],[119,1],[119,1],[119,1],[119,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                        /*for(const simbolo in getAmbitoActual()){
                            console.log("-----------------");
                            console.log("Id: "+getAmbitoActual()[simbolo].id);
                            console.log("Tipo: "+getAmbitoActual()[simbolo].tipo);
                            console.log("Ambito: "+getAmbitoActual()[simbolo].ambito);
                            console.log("Visibilidad: "+getAmbitoActual()[simbolo].visibilidad);
                            console.log("Rol: "+getAmbitoActual()[simbolo].rol);
                        }*/
                    
break;
case 2:

        //error
        ErrorLS = new Object();
        ErrorLS.lexema = yytext;
        ErrorLS.linea = this._$.first_line;
        ErrorLS.columna = this._$.first_column;
        ErrorLS.tipo = 'SintÃ¡ctico';
        ErrorLS.descripcion = '';
        errores.push(ErrorLS);
    
break;
case 21:

        cerrarAmbito();
    
break;
case 22:

        nuevoAmbito();
    
break;
case 27:

        //declaracion y asignacion
        if($$[$0]==null || $$[$0-2] == $$[$0].tipoResultado){
            while(ids.length>0){
                //asignacion de tipo correcta
                let id = ids.pop();
                if(existeSimbolo(id,yy.VARIABLE) || existeSimbolo(id,yy.CONSTANTE)){
                    errorSemantico("La variable "+id+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
                }else{
                    if($$[$0] != null){
                        //simboloVariable.valor = $$[$0].valor;
                    }
                    agregarSimbolo(id,$$[$0-2],"",yy.DEFAULT,yy.VARIABLE);
                }
            }
        }else{
            errorSemantico("Tipo de dato requerido : "+$$[$0-2]+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
        }
    
break;
case 28:

        //declaracion y asignacion
        if($$[$0-3] == $$[$0].tipoResultado){
            while(ids.length>0){
                //asignacion de tipo correcta
                let id = ids.pop();
                if(existeSimbolo(id,yy.VARIABLE) || existeSimbolo(id,yy.CONSTANTE)){
                    errorSemantico("La variable "+id+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
                }else{
                    //simboloVariable.valor = $$[$0-2].valor;
                    agregarSimbolo(id,$$[$0-3],"",yy.DEFAULT,yy.CONSTANTE);
                }
            }
        }else{
            errorSemantico("Tipo de dato requerido : "+$$[$0-3]+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
        }
    
break;
case 31:
 ids.push($$[$0]); 
break;
case 32:
 this.$ = yy.INT; 
break;
case 33:
 this.$ = yy.FLOAT; 
break;
case 34:
 this.$ = yy.CHAR; 
break;
case 35: case 91: case 96: case 100: case 109: case 114: case 120:
 this.$ = null; 
break;
case 36: case 88:
 this.$ = $$[$0]; 
break;
case 37:

        //validando id
        let simId = validarVariable($$[$0-2],yy);
        if(simId==null){
            errorSemantico("No se encuentra el sÃ­mbolo "+$$[$0-2]+" .",this._$.first_line,this._$.first_column);
        }else{
            if(simId.rol==yy.CONSTANTE){
                errorSemantico("No se puede reasignar un valor a una constante.",this._$.first_line,this._$.first_column);
            }else{
                if(simId.tipo == $$[$0].tipoResultado){
                    //asignacion exitosa;
                    //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                    //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                    //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                    //TEMP+++++++++++++++++++++++++++++++++++
                    let ins = new Instruccion(new Instruccion(null,null,yy.ID,$$[$0-2].toString()),$$[$0].instruccion,"asign",null);
                    instrucciones.push(ins);     
                }else{
                    errorSemantico("Tipo de dato requerido : "+simId.tipo+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
                }
            }
        }
    
break;
case 38:

        let simId_a = validarVariable($$[$0-1],yy);
        if(simId_a==null){
            errorSemantico("No se encuentra el sÃ­mbolo "+$$[$0-1]+" .",this._$.first_line,this._$.first_column);
        }else{
            if(simId_a.tipo == yy.INT || simId_a.tipo == yy.DOUBLE){
                //asignacion exitosa;
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //TEMP+++++++++++++++++++++++++++++++++++
                let ins = new Instruccion(new Instruccion(null,null,yy.ID,$$[$0-1].toString()),$$[$01].instruccion,"asign",null);
                instrucciones.push(ins); 
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.INT+","+yy.DOUBLE+" . Obtenido: "+simId_a.tipo+" .",this._$.first_line,this._$.first_column);
            }
        }
    
break;
case 42: case 77:

        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(exception){
        }
    
break;
case 43: case 55: case 66: case 69: case 74: case 78: case 81:
 nuevoAmbito(); 
break;
case 44: case 53: case 56: case 67: case 70: case 75: case 79: case 82:
 cerrarAmbito(); 
break;
case 52:

        nuevoAmbito();
        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(exception){
        }
    
break;
case 58:

        if($$[$0-1].tipoResultado == yy.FLOAT || $$[$0-1].tipoResultado == yy.BOOLEAN){
            errorSemantico("Tipo de dato requerido : "+yy.INT+","+yy.CHAR+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
        }
        tipoDatoSwtich = $$[$0-1].tipoResultado;
    
break;
case 65:

        if($$[$0-4].tipoResultado != tipoDatoSwtich){
            errorSemantico("Tipo de dato requerido : "+tipoDatoSwtich+" . Obtenido: "+$$[$0-4].tipoResultado+" .",this._$.first_line,this._$.first_column);
        }
    
break;
case 73:

        try{
            if($$[$0-2].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-2].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(exception){
        }
    
break;
case 80:

    
break;
case 83:

        try{
            if($$[$0-2].tipoResultado!=yy.BOOLEAN){
            errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-2].tipoResultado+" .",this._$.first_line,this._$.first_column); 
            }
        }catch(e){
        }
    
break;
case 89: case 94: case 98: case 107: case 112: case 118:

                this.$ = produccion(yy,$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
            
break;
case 90: case 95: case 99: case 108: case 113: case 119:

                        this.$ = produccionPrima(yy,$$[$0-2],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
                    
break;
case 92:
 this.$ = yy.OR; 
break;
case 93:
 this.$ = yy.XOR; 
break;
case 97:
 this.$ = yy.AND; 
break;
case 101:
 this.$ = yy.IGUAL; 
break;
case 102:
 this.$ = yy.NO_IGUAL; 
break;
case 103:
 this.$ = yy.MAYOR; 
break;
case 104:
 this.$ = yy.MENOR; 
break;
case 105:
 this.$ = yy.MAYOR_IGUAL; 
break;
case 106:
 this.$ = yy.MENOR_IGUAL; 
break;
case 110:
 this.$ = yy.SUMA; 
break;
case 111:
 this.$ = yy.RESTA; 
break;
case 115:
 this.$ = yy.MULTIPLICACION; 
break;
case 116:
 this.$ = yy.DIVISION; 
break;
case 117:
 this.$ = yy.MODULO; 
break;
case 121:
 this.$ = yy.POTENCIA; 
break;
case 122:
 this.$ = $$[$0-1]; 
break;
case 123:

        let simbolo = obtenerSimbolo($$[$0]);
        if(simbolo==null){
            errorSemantico("No se encuentra el sÃ­mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
            this.$ = null;
        }else{
            if(simbolo.tipo==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+simbolo.tipo+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 124:

        operacion = new Object();
        operacion.tipoResultado = yy.BOOLEAN;
        this.$ = operacion;
    
break;
case 125:

        if($$[$0-1]==null){
            this.$ = null;
        }else{
            if($$[$0-1].tipoResultado==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 126:

                    operacion = new Object();
                    operacion.tipoResultado = yy.INT;
                    operacion.instruccion = new Instruccion(null,null,yy.INT,Number($$[$0]));
                    this.$ = operacion;
                
break;
case 127:

                    operacion = new Object();
                    operacion.tipoResultado = yy.FLOAT;
                    operacion.instruccion = new Instruccion(null,null,yy.FLOAT,$$[$0].toString());
                    this.$ = operacion;
                
break;
case 128:

                    operacion = new Object();
                    operacion.tipoResultado = yy.CHAR;
                    operacion.instruccion = new Instruccion(null,null,yy.CHAR,$$[$0].toString());
                    this.$ = operacion;
                
break;
case 129:

                    operacion = new Object();
                    let sim_id_a = validarVariable($$[$0],yy);
                    if(sim_id_a==null){
                        errorSemantico("No se encuentra el sÃ­mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
                        operacion.tipoResultado = yy.ID;
                    }else{
                        operacion.tipoResultado = sim_id_a.tipo;
                    }
                    operacion.instruccion = new Instruccion(null,null,yy.ID,$$[$0].toString());
                    this.$ = operacion;
                
break;
}
},
table: [o($V0,[2,7],{3:1,4:2,7:3,6:4,13:5,10:7,2:[1,6],11:$V1}),{1:[3]},{5:[1,9]},{8:10,17:12,28:[2,24],32:11,33:13,36:$V2,42:$V3,43:$V4,44:$V5},{5:[2,4]},o($V0,[2,6]),{5:[2,2]},o($V0,[2,8],{10:7,13:18,11:$V1}),{12:[1,19]},{1:[2,1]},{9:20,25:21,28:[1,22]},{28:[2,23]},{18:[1,23]},{34:24,39:25,41:$V6},{33:27,42:$V3,43:$V4,44:$V5},{41:[2,32]},{41:[2,33]},{41:[2,34]},o($V0,[2,9]),o([11,28,36,42,43,44],[2,5]),{5:[2,3]},{26:[1,28]},{29:[1,29]},{17:12,28:[2,25],32:30,33:13,36:$V2,42:$V3,43:$V4,44:$V5},{18:[2,35],35:31,37:[1,32]},o($V7,[2,29],{40:[1,33]}),o([18,37,40],[2,31]),{34:34,39:25,41:$V6},{14:35,15:36,16:37,17:38,19:39,20:40,21:41,22:42,23:43,24:44,27:$V8,33:13,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,48:46,51:$Va,61:47,63:$Vb,76:$Vc,79:$Vd,80:49,83:$Ve},{30:[1,54]},{28:[2,26]},{18:[2,27]},{30:$Vf,38:55,41:$Vg,89:56,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},{34:69,39:25,41:$V6},{37:[1,70]},{27:[1,71]},o($Vl,[2,10]),o($Vl,[2,12],{33:13,16:37,17:38,19:39,20:40,21:41,22:42,23:43,24:44,48:46,61:47,80:49,15:72,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,51:$Va,63:$Vb,76:$Vc,79:$Vd,83:$Ve}),{18:[1,73]},{18:[1,74]},o($Vm,[2,16]),o($Vm,[2,17]),o($Vm,[2,18]),o($Vm,[2,19]),o($Vm,[2,20]),{37:[1,75],45:76,46:[1,77],47:[1,78]},{26:[1,79]},{26:[1,81],62:80},{30:[2,81],84:82},{26:[1,83]},{26:[2,74],77:84},{30:[2,43],52:85},{30:[1,86]},{30:[2,78],82:87},{31:[1,88]},{18:[2,36]},o($Vn,[2,88]),o($Vn,$Vo,{91:89,92:90,93:$Vp,94:$Vq}),o($Vr,$Vs,{96:93,97:94,98:$Vt}),o($Vu,$Vv,{100:96,101:97,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB}),o($VC,$VD,{109:104,110:105,111:$VE,112:$VF}),o($VG,$VH,{114:108,115:109,116:$VI,117:$VJ,118:$VK}),o($VL,$VM,{120:113,121:114,122:$VN}),{30:$Vf,41:$Vg,89:116,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},{30:[1,119],41:[1,117],124:[1,118]},o($VO,[2,126]),o($VO,[2,127]),o($VO,[2,128]),o($VO,[2,129]),o($V7,[2,30]),{30:$Vf,38:120,41:$Vg,89:56,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},{5:[2,21]},o($Vl,[2,13]),o($Vm,[2,14]),o($Vm,[2,15]),{30:$Vf,38:121,41:$Vg,89:56,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},o($VP,[2,38]),o($VP,[2,39]),o($VP,[2,40]),{14:122,15:36,16:37,17:38,19:39,20:40,21:41,22:42,23:43,24:44,27:$V8,33:13,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,48:46,51:$Va,61:47,63:$Vb,76:$Vc,79:$Vd,80:49,83:$Ve},o($Vm,[2,57]),{27:[1,123],64:124,65:125,66:126,67:$VQ,72:$VR},{30:[1,129]},{14:130,15:36,16:37,17:38,19:39,20:40,21:41,22:42,23:43,24:44,27:$V8,33:13,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,48:46,51:$Va,61:47,63:$Vb,76:$Vc,79:$Vd,80:49,83:$Ve},{26:[1,131]},{30:[1,132]},{30:$Vf,38:133,41:$Vg,89:56,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},{30:[1,134]},{26:[2,22]},o($Vn,[2,89]),{30:$Vf,41:$Vg,90:135,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},o($VS,[2,92]),o($VS,[2,93]),o($Vr,[2,94]),{30:$Vf,41:$Vg,95:136,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},o($VS,[2,97]),o($Vu,[2,98]),{30:$Vf,41:$Vg,99:137,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},o($VS,[2,101]),o($VS,[2,102]),o($VS,[2,103]),o($VS,[2,104]),o($VS,[2,105]),o($VS,[2,106]),o($VC,[2,107]),{30:$Vf,41:$Vg,108:138,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},o($VS,[2,110]),o($VS,[2,111]),o($VG,[2,112]),{30:$Vf,41:$Vg,113:139,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},o($VS,[2,115]),o($VS,[2,116]),o($VS,[2,117]),o($VL,[2,118]),{30:$Vf,41:$Vg,119:140,123:$Vh,125:$Vi,126:$Vj,127:$Vk},o($VS,[2,121]),{31:[1,141]},o($VO,[2,123]),o($VO,[2,124]),{30:$Vf,41:$Vg,89:142,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},{18:[2,28]},o($VP,[2,37]),{27:[1,143]},o($Vm,[2,59]),{27:[1,144],65:145,72:$VR},{27:[1,146]},o($VT,[2,63],{66:126,64:147,67:$VQ}),{69:[2,69],73:148},o($VS,[2,66],{68:149}),{17:152,19:153,33:13,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,85:150,87:151},{27:[1,154]},{14:155,15:36,16:37,17:38,19:39,20:40,21:41,22:42,23:43,24:44,27:$V8,33:13,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,48:46,51:$Va,61:47,63:$Vb,76:$Vc,79:$Vd,80:49,83:$Ve},{30:$Vf,38:156,41:$Vg,89:56,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},{31:[1,157]},{30:$Vf,38:158,41:$Vg,89:56,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},o($Vn,$Vo,{92:90,91:159,93:$Vp,94:$Vq}),o($Vr,$Vs,{97:94,96:160,98:$Vt}),o($Vu,$Vv,{101:97,100:161,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB}),o($VC,$VD,{110:105,109:162,111:$VE,112:$VF}),o($VG,$VH,{115:109,114:163,116:$VI,117:$VJ,118:$VK}),o($VL,$VM,{121:114,120:164,122:$VN}),o($VO,[2,122]),{31:[1,165]},o($VU,[2,44],{49:166}),o($Vm,[2,60]),{27:[1,167]},o($Vm,[2,61]),o($VT,[2,64]),{69:[1,168]},{30:$Vf,38:169,41:$Vg,89:56,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},{31:[1,170]},{18:[1,171]},{18:[2,84]},{18:[2,85]},o($Vm,[2,79],{81:172}),{27:[1,173]},{31:[1,174]},{26:[2,58]},{31:[1,175]},o($Vn,[2,90]),o($Vr,[2,95]),o($Vu,[2,99]),o($VC,[2,108]),o($VG,[2,113]),o($VL,[2,119]),o($VO,[2,125]),o($Vm,[2,48],{50:176,53:177,54:178,55:179,56:181,58:$VV}),o($Vm,[2,62]),{14:182,15:36,16:37,17:38,19:39,20:40,21:41,22:42,23:43,24:44,27:$V8,33:13,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,48:46,51:$Va,61:47,63:$Vb,76:$Vc,79:$Vd,80:49,83:$Ve},{69:[1,183]},{26:[1,184]},{30:$Vf,38:185,41:$Vg,89:56,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},o($Vm,[2,76]),{78:186,79:[2,75]},{26:[2,42]},{26:[2,77]},o($Vm,[2,41]),o($Vm,[2,45],{56:181,54:187,55:188,58:$VV}),o($Vm,[2,47]),o($VU,[2,49]),{26:[2,55],51:[1,190],59:189},{26:[1,191]},{27:[2,70],74:192},o($Vl,$V8,{33:13,15:36,16:37,17:38,19:39,20:40,21:41,22:42,23:43,24:44,48:46,61:47,80:49,14:193,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,51:$Va,63:$Vb,76:$Vc,79:$Vd,83:$Ve}),{14:194,15:36,16:37,17:38,19:39,20:40,21:41,22:42,23:43,24:44,27:$V8,33:13,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,48:46,51:$Va,61:47,63:$Vb,76:$Vc,79:$Vd,80:49,83:$Ve},{18:[1,195]},{79:[1,196]},o($Vm,[2,46]),o($VU,[2,50]),{26:[1,197]},{30:[1,198]},{14:199,15:36,16:37,17:38,19:39,20:40,21:41,22:42,23:43,24:44,27:$V8,33:13,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,48:46,51:$Va,61:47,63:$Vb,76:$Vc,79:$Vd,80:49,83:$Ve},{27:[2,68]},o($VW,[2,72],{70:200,75:[1,201]}),{27:[1,202]},{19:204,31:[2,87],41:$V9,88:203},{30:[1,205]},{14:206,15:36,16:37,17:38,19:39,20:40,21:41,22:42,23:43,24:44,27:$V8,33:13,36:$V2,41:$V9,42:$V3,43:$V4,44:$V5,48:46,51:$Va,61:47,63:$Vb,76:$Vc,79:$Vd,80:49,83:$Ve},{30:$Vf,38:207,41:$Vg,89:56,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},{27:[1,208]},o($VW,[2,67],{71:209}),{18:[1,210]},o($Vm,[2,82],{86:211}),{31:[2,83]},{31:[2,86]},{30:$Vf,38:212,41:$Vg,89:56,90:57,95:58,99:59,108:60,113:61,119:62,123:$Vh,125:$Vi,126:$Vj,127:$Vk},{27:[1,213]},{31:[1,214]},o($VU,[2,53],{57:215}),o($VW,[2,65]),o($VW,[2,71]),o($Vm,[2,80]),{31:[1,216]},o($Vm,[2,56],{60:217}),{26:[2,52]},o($VU,[2,51]),{18:[1,218]},o($Vm,[2,54]),o($Vm,[2,73])],
defaultActions: {4:[2,4],6:[2,2],9:[2,1],11:[2,23],15:[2,32],16:[2,33],17:[2,34],20:[2,3],30:[2,26],31:[2,27],55:[2,36],71:[2,21],88:[2,22],120:[2,28],152:[2,84],153:[2,85],157:[2,58],174:[2,42],175:[2,77],192:[2,68],203:[2,83],204:[2,86],214:[2,52]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let errores = [];
    let tablasDeSimbolos = [];
    let ambitoActual = [];
    let ids = [];
    let tipoDatoSwtich = "";
    let instrucciones = [];

    exports.getInstrucciones = function(){
        return instrucciones;
    }

    function nuevaInstruccion(opr1,opr2,ins1,ins2,opr){
        Instruccion = new Object();
        Instruccion.opr1 = opr1;
        Instruccion.opr2 = opr2;
        Instruccion.ins1 = ins1;
        Instruccion.ins2 = ins2;
        Instruccion.opr = opr;
    }

    function Instruccion(opr1,opr2,opr,resultado){
        this.opr1 = opr1;
        this.opr2 = opr2;
        this.opr = opr;
        this.resultado = resultado;
    }

    exports.getErrores = function (){
        return errores;
    }
        
    exports.reset = function(yy){
        errores.splice(0, errores.length);
        tablasDeSimbolos.splice(0, tablasDeSimbolos.length);
        let tablaGlobal = [];
        tablasDeSimbolos.push(tablaGlobal);
        ambitoActual = [yy.GLOBAL];
        ids.splice(0, ids.length);
        tipoDatoSwtich = "";
        instrucciones.splice(0, instrucciones.length);
    }

    function nuevoAmbito(){
        let nuevaTabla = [];
        if(tablasDeSimbolos.length){
            nuevaTabla = tablasDeSimbolos.at(-1).slice();
        }
        tablasDeSimbolos.push(nuevaTabla);
    }

    function getAmbitoActual(){
        return tablasDeSimbolos.at(-1);
    }

    function cerrarAmbito(){
        tablasDeSimbolos.pop();
    }

    function errorSemantico(descripcion,linea,columna){
        ErrorLS = new Object();
        ErrorLS.lexema = "";
        ErrorLS.linea = linea;
        ErrorLS.columna = columna;
        ErrorLS.tipo = 'SemÃ¡ntico';
        ErrorLS.descripcion = descripcion;
        errores.push(ErrorLS);
    }

    function produccion(yy,$1,$2,linea,columna){
        try{
            if($2!=null){
                //Analizar tipo de resultado
                let tipoResultado = yy.filtrarOperacion($1.tipoResultado,$2.tipoResultado,$2.operacionPendiente);
                if(tipoResultado!=null){
                    operacion = new Object();
                    operacion.tipoResultado = tipoResultado;
                    operacion.operacionPendiente = $1;

                    let ins = new Instruccion($1.instruccion,$2.instruccion,$2.operacionPendiente,null);
                    operacion.instruccion = ins;

                    return operacion;
                }else{
                    errorSemantico("Operandos incorrectos para el operador "+$2.operacionPendiente+" .",linea,columna);
                    return null;
                }
            }else{
                return $1;
            }
        }catch(error){
            return null;
        }
    }

    function produccionPrima(yy,$1,$2,$3,linea,columna){
        try{
            if($3==null){
                operacion = new Object();
                operacion.tipoResultado = $2.tipoResultado;
                operacion.operacionPendiente = $1;

                operacion.instruccion = $2.instruccion;

                return operacion;
            }else{
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($2.tipoResultado,$3.tipoResultado,$3.operacionPendiente);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;

                        let ins = new Instruccion($2.instruccion,$3.instruccion,$3.operacionPendiente,null);
                        operacion.instruccion = ins;

                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$3.operacionPendiente+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }
        }catch(error){
            return null;
        }
    }

    function existeSimbolo(id,rol){
        for(let simbolo in getAmbitoActual()){
            if(getAmbitoActual()[simbolo].rol==rol && getAmbitoActual()[simbolo].id==id){
                return true;
            }
        }
        return false;
    }

    function agregarSimbolo(id,tipo,ambito,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = ambito;
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        getAmbitoActual().push(simboloNuevo);
    }

    function validarVariable(id,yy){
        let tabla = getAmbitoActual().slice();
        while(tabla.length>0){
            let sim = tabla.pop();
            if((sim.rol==yy.VARIABLE || sim.rol==yy.PARAMETRO || sim.rol==yy.CONSTANTE) && sim.id==id){
                return sim;
            }
        }
        return null;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*ignorar*/
break;
case 1: /*ignorar comentario de linea*/
break;
case 2: /*ignorar comentario de bloque*/
break;
case 3:return 126
break;
case 4:return 125
break;
case 5: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 127; 
break;
case 6: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 12; 
break;
case 7:return 42
break;
case 8:return 43
break;
case 9:return 44
break;
case 10:return 36
break;
case 11:return 11
break;
case 12:return 28
break;
case 13:return 29
break;
case 14:return 51
break;
case 15:return 58
break;
case 16:return 83
break;
case 17:return 63
break;
case 18:return 67
break;
case 19:return 76
break;
case 20:return 79
break;
case 21:return 72
break;
case 22:return 75
break;
case 23:return 'PR_PRINTLN'
break;
case 24:return 'PR_PRINT'
break;
case 25:return 46
break;
case 26:return 47
break;
case 27:return 111
break;
case 28:return 112
break;
case 29:return 116
break;
case 30:return 117
break;
case 31:return 118
break;
case 32:return 122
break;
case 33:return 26
break;
case 34:return 27
break;
case 35:return 'CORCH_A'
break;
case 36:return 'CORCH_C'
break;
case 37:return 30
break;
case 38:return 31
break;
case 39:return 94
break;
case 40:return 93
break;
case 41:return 98
break;
case 42:return 102
break;
case 43:return 103
break;
case 44:return 106
break;
case 45:return 107
break;
case 46:return 104
break;
case 47:return 105
break;
case 48:return 123
break;
case 49:return 18
break;
case 50:return 69
break;
case 51:return 40
break;
case 52:return 37
break;
case 53:return 41
break;
case 54:return 5
break;
case 55:/*Instertar codigo para recuperar el error lexico*/
                //error
                ErrorLS = new Object();
                ErrorLS.lexema = yy_.yytext;
                ErrorLS.linea = yy_.yylloc.first_line;
                ErrorLS.columna = yy_.yylloc.first_column;
                ErrorLS.tipo = 'LÃ©xico';
                ErrorLS.descripcion = 'El lexema '+yy_.yytext+' no es vÃ¡lido.';
                errores.push(ErrorLS);
        
break;
}
},
rules: [/^(?:[ \r\t\n]+)/,/^(?:[/][/].*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:'.')/,/^(?:"[^"]*")/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:const\b)/,/^(?:#include\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:[+])/,/^(?:[-])/,/^(?:[*])/,/^(?:[/])/,/^(?:[%])/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\|\|)/,/^(?:\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z]+[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Programa;
exports.Parser = Programa.Parser;
exports.parse = function () { return Programa.parse.apply(Programa, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}