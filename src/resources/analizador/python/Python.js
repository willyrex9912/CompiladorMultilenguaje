/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Python = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[5,14],$V2=[1,24],$V3=[1,20],$V4=[1,21],$V5=[1,25],$V6=[6,17],$V7=[9,17,20,21,26],$V8=[1,47],$V9=[1,41],$Va=[1,42],$Vb=[1,46],$Vc=[1,43],$Vd=[1,44],$Ve=[1,45],$Vf=[6,11,17],$Vg=[2,25],$Vh=[1,52],$Vi=[1,53],$Vj=[6,11,17,36,37],$Vk=[2,30],$Vl=[1,56],$Vm=[6,11,17,36,37,41],$Vn=[2,34],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[6,11,17,36,37,41,45,46,47,48,49,50],$Vv=[2,43],$Vw=[1,67],$Vx=[1,68],$Vy=[6,11,17,36,37,41,45,46,47,48,49,50,54,55],$Vz=[2,48],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[6,11,17,36,37,41,45,46,47,48,49,50,54,55,59,60,61],$VE=[2,54],$VF=[1,76],$VG=[6,11,17,36,37,41,45,46,47,48,49,50,54,55,59,60,61,65],$VH=[9,10,66,67,68,69,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"a1":4,"EOF":5,"SALTO_DE_LINEA":6,"declaracion_funcion":7,"def":8,"ID":9,"PARENT_A":10,"PARENT_C":11,"DOS_PUNTOS":12,"declaracion_funcion_p":13,"PR_DEF":14,"INDENT":15,"instrucciones_metodo":16,"DEDENT":17,"instruccion":18,"instruccion_p":19,"PR_PRINT":20,"PR_PRINTLN":21,"manejo_variable":22,"condicional_if":23,"ASIGNACION":24,"expresion_multiple":25,"PR_IF":26,"condicional_if_p":27,"condicional_elif":28,"PR_ELIF":29,"condicional_else":30,"PR_ELSE":31,"a3":32,"b3":33,"a3p":34,"a3bp":35,"OR":36,"XOR":37,"c3":38,"b3p":39,"b3bp":40,"AND":41,"d3":42,"c3p":43,"c3bp":44,"IGUAL":45,"NO_IGUAL":46,"MAYOR":47,"MENOR":48,"MAYOR_IGUAL":49,"MENOR_IGUAL":50,"e3":51,"d3p":52,"d3bp":53,"SUMA":54,"RESTA":55,"f3":56,"e3p":57,"e3bp":58,"MULTIPLICACION":59,"DIVISION":60,"MODULO":61,"g3":62,"f3p":63,"f3bp":64,"POTENCIA":65,"NOT":66,"BOOLEAN":67,"INT":68,"DOUBLE":69,"STRING":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SALTO_DE_LINEA",9:"ID",10:"PARENT_A",11:"PARENT_C",12:"DOS_PUNTOS",14:"PR_DEF",15:"INDENT",17:"DEDENT",20:"PR_PRINT",21:"PR_PRINTLN",24:"ASIGNACION",26:"PR_IF",29:"PR_ELIF",31:"PR_ELSE",36:"OR",37:"XOR",41:"AND",45:"IGUAL",46:"NO_IGUAL",47:"MAYOR",48:"MENOR",49:"MAYOR_IGUAL",50:"MENOR_IGUAL",54:"SUMA",55:"RESTA",59:"MULTIPLICACION",60:"DIVISION",61:"MODULO",65:"POTENCIA",66:"NOT",67:"BOOLEAN",68:"INT",69:"DOUBLE",70:"STRING"},
productions_: [0,[3,2],[3,3],[4,1],[4,2],[7,6],[8,1],[13,3],[13,0],[16,1],[16,3],[16,1],[16,2],[18,1],[18,1],[18,1],[19,1],[22,3],[23,6],[27,3],[28,9],[30,6],[25,1],[32,2],[34,3],[34,0],[35,1],[35,1],[33,2],[39,3],[39,0],[40,1],[38,2],[43,3],[43,0],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[42,2],[52,3],[52,0],[53,1],[53,1],[51,2],[57,3],[57,0],[58,1],[58,1],[58,1],[56,2],[63,3],[63,0],[64,1],[62,3],[62,2],[62,2],[62,4],[62,1],[62,1],[62,1],[62,1],[62,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 6:
 cerrarAmbitos(); 
break;
case 18:

        insEsAbierta = false;
    
break;
case 19:

        insEsAbierta = true;
    
break;
case 22:
 this.$ = $$[$0]; 
break;
case 23: case 28: case 32: case 41: case 46: case 52:

                this.$ = produccion(yy,$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
            
break;
case 24: case 29: case 33: case 42: case 47: case 53:

                        this.$ = produccionPrima(yy,$$[$0-2],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
                    
break;
case 25: case 30: case 34: case 43: case 48: case 54:
 this.$ = null; 
break;
case 26:
 this.$ = yy.OR; 
break;
case 27:
 this.$ = yy.XOR; 
break;
case 31:
 this.$ = yy.AND; 
break;
case 35:
 this.$ = yy.IGUAL; 
break;
case 36:
 this.$ = yy.NO_IGUAL; 
break;
case 37:
 this.$ = yy.MAYOR; 
break;
case 38:
 this.$ = yy.MENOR; 
break;
case 39:
 this.$ = yy.MAYOR_IGUAL; 
break;
case 40:
 this.$ = yy.MENOR_IGUAL; 
break;
case 44:
 this.$ = yy.SUMA; 
break;
case 45:
 this.$ = yy.RESTA; 
break;
case 49:
 this.$ = yy.MULTIPLICACION; 
break;
case 50:
 this.$ = yy.DIVISION; 
break;
case 51:
 this.$ = yy.MODULO; 
break;
case 55:
 this.$ = yy.POTENCIA; 
break;
case 56:
 this.$ = $$[$0-1]; 
break;
case 57:

        let simbolo = obtenerSimbolo($$[$0]);
        if(simbolo==null){
            errorSemantico("No se encuentra el símbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
            this.$ = null;
        }else{
            if(simbolo.tipo==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+simbolo.tipo+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 58:

        operacion = new Object();
        operacion.tipoResultado = yy.BOOLEAN;
        this.$ = operacion;
    
break;
case 59:

        if($$[$0-1]==null){
            this.$ = null;
        }else{
            if($$[$0-1].tipoResultado==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 60:

                    operacion = new Object();
                    operacion.tipoResultado = yy.INT;
                    this.$ = operacion;
                
break;
case 61:

                    operacion = new Object();
                    operacion.tipoResultado = yy.DOUBLE;
                    this.$ = operacion;
                
break;
case 62:

                    operacion = new Object();
                    operacion.tipoResultado = yy.STRING;
                    this.$ = operacion;
                
break;
case 63:

                    operacion = new Object();
                    operacion.tipoResultado = yy.BOOLEAN;
                    this.$ = operacion;
                
break;
case 64:

                    operacion = new Object();
                    let sim_id_a = validarVariable($$[$0],yy);
                    if(sim_id_a==null){
                        errorSemantico("No se encuentra el símbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
                        operacion.tipoResultado = yy.ID;
                    }else{
                        operacion.tipoResultado = sim_id_a.tipo;
                    }
                    this.$ = operacion;
                
break;
}
},
table: [{3:1,4:2,6:[1,3],7:4,8:5,14:$V0},{1:[3]},{5:[1,7]},{4:8,7:4,8:5,14:$V0},{4:9,5:[2,3],7:4,8:5,14:$V0},{9:[1,10]},{9:[2,6]},{1:[2,1]},{5:[1,11]},{5:[2,4]},{10:[1,12]},{1:[2,2]},{11:[1,13]},{12:[1,14]},o($V1,[2,8],{13:15,15:[1,16]}),o($V1,[2,5]),{9:$V2,16:17,18:18,19:19,20:$V3,21:$V4,22:22,23:23,26:$V5},{17:[1,26]},{6:[1,27],17:[2,9]},{9:$V2,16:28,17:[2,11],18:18,19:19,20:$V3,21:$V4,22:22,23:23,26:$V5},o($V6,[2,13]),o($V6,[2,14]),o($V6,[2,15]),o($V7,[2,16]),{24:[1,29]},{10:[1,31],27:30},o($V1,[2,7]),{9:$V2,16:32,18:18,19:19,20:$V3,21:$V4,22:22,23:23,26:$V5},{17:[2,12]},{9:$V8,10:$V9,25:33,32:34,33:35,38:36,42:37,51:38,56:39,62:40,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve},{12:[1,48]},{9:$V8,10:$V9,25:49,32:34,33:35,38:36,42:37,51:38,56:39,62:40,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve},{17:[2,10]},o($V6,[2,17]),o($Vf,[2,22]),o($Vf,$Vg,{34:50,35:51,36:$Vh,37:$Vi}),o($Vj,$Vk,{39:54,40:55,41:$Vl}),o($Vm,$Vn,{43:57,44:58,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt}),o($Vu,$Vv,{52:65,53:66,54:$Vw,55:$Vx}),o($Vy,$Vz,{57:69,58:70,59:$VA,60:$VB,61:$VC}),o($VD,$VE,{63:74,64:75,65:$VF}),{9:$V8,10:$V9,32:77,33:35,38:36,42:37,51:38,56:39,62:40,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve},{9:[1,78],10:[1,80],67:[1,79]},o($VG,[2,60]),o($VG,[2,61]),o($VG,[2,62]),o($VG,[2,63]),o($VG,[2,64]),{15:[1,81]},{11:[1,82]},o($Vf,[2,23]),{9:$V8,10:$V9,33:83,38:36,42:37,51:38,56:39,62:40,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve},o($VH,[2,26]),o($VH,[2,27]),o($Vj,[2,28]),{9:$V8,10:$V9,38:84,42:37,51:38,56:39,62:40,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve},o($VH,[2,31]),o($Vm,[2,32]),{9:$V8,10:$V9,42:85,51:38,56:39,62:40,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve},o($VH,[2,35]),o($VH,[2,36]),o($VH,[2,37]),o($VH,[2,38]),o($VH,[2,39]),o($VH,[2,40]),o($Vu,[2,41]),{9:$V8,10:$V9,51:86,56:39,62:40,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve},o($VH,[2,44]),o($VH,[2,45]),o($Vy,[2,46]),{9:$V8,10:$V9,56:87,62:40,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve},o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,51]),o($VD,[2,52]),{9:$V8,10:$V9,62:88,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve},o($VH,[2,55]),{11:[1,89]},o($VG,[2,57]),o($VG,[2,58]),{9:$V8,10:$V9,32:90,33:35,38:36,42:37,51:38,56:39,62:40,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve},{9:$V2,16:91,18:18,19:19,20:$V3,21:$V4,22:22,23:23,26:$V5},{12:[2,19]},o($Vf,$Vg,{35:51,34:92,36:$Vh,37:$Vi}),o($Vj,$Vk,{40:55,39:93,41:$Vl}),o($Vm,$Vn,{44:58,43:94,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt}),o($Vu,$Vv,{53:66,52:95,54:$Vw,55:$Vx}),o($Vy,$Vz,{58:70,57:96,59:$VA,60:$VB,61:$VC}),o($VD,$VE,{64:75,63:97,65:$VF}),o($VG,[2,56]),{11:[1,98]},{17:[1,99]},o($Vf,[2,24]),o($Vj,[2,29]),o($Vm,[2,33]),o($Vu,[2,42]),o($Vy,[2,47]),o($VD,[2,53]),o($VG,[2,59]),o($V7,[2,18])],
defaultActions: {6:[2,6],7:[2,1],9:[2,4],11:[2,2],28:[2,12],32:[2,10],82:[2,19]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
 let indent = [0]; let dedent = 0; 
    let errores = [];
    let tablaDeSimbolos = [];
    let ambitoActual = [];
    let ids = [];
    let simbolosParametros = [];
    let cadParametros = "";
    let ambitoClase = true;
    let tipoDatoSwtich = "";

    let insEsAbierta = false;

    exports.getErrores = function (){
        return errores;
    }

    exports.reset = function(){
        errores.splice(0, errores.length);
        tablaDeSimbolos.splice(0, tablaDeSimbolos.length);
        ambitoActual.splice(0, ambitoActual.length);
        ids.splice(0, ids.length);
        simbolosParametros.splice(0, simbolosParametros.length);
        cadParametros = "";
        ambitoClase = true;
        tipoDatoSwtich = "";
        indent = [0];

        insEsAbierta = false;
    }

    function errorSemantico(descripcion,linea,columna){
        ErrorLS = new Object();
        ErrorLS.lexema = "";
        ErrorLS.linea = linea;
        ErrorLS.columna = columna;
        ErrorLS.tipo = 'Semántico';
        ErrorLS.descripcion = descripcion;
        errores.push(ErrorLS);
    }

    function produccion(yy,$1,$2,linea,columna){
        if($2!=null){
            //Analizar tipo de resultado
            if($2!=null){
                let tipoResultado = yy.filtrarOperacion($1.tipoResultado,$2.tipoResultado,$2.operacionPendiente);
                if(tipoResultado!=null){
                    operacion = new Object();
                    operacion.tipoResultado = tipoResultado;
                    operacion.operacionPendiente = $1;
                    return operacion;
                }else{
                    errorSemantico("Operandos incorrectos para el operador "+$2.operacionPendiente+" .",linea,columna);
                    return null;
                }
            }else{
                return null;
            }
        }else{
            return $1;
        }
    }

    function produccionPrima(yy,$1,$2,$3,linea,columna){
        if($3==null){
            operacion = new Object();
            operacion.tipoResultado = $2.tipoResultado;
            operacion.operacionPendiente = $1;
            return operacion;
        }else{
            //Analizar tipo de resultado
            if($2!=null){
                let tipoResultado = yy.filtrarOperacion($2.tipoResultado,$3.tipoResultado,$1);
                if(tipoResultado!=null){
                    operacion = new Object();
                    operacion.tipoResultado = tipoResultado;
                    operacion.operacionPendiente = $1;
                    return operacion;
                }else{
                    errorSemantico("Operandos incorrectos para el operador "+$1+" .",linea,columna);
                    return null;
                }
            }else{
                return null;
            }
        }
    }

    function cerrarAmbitos(){
        indent = [0];
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                            indent = indent || [0];
                                            dedent = dedent || 0;

                                            if (dedent) {
                                                dedent--;
                                                this.unput("");
                                                console.log(":"+yy_.yytext+":");
                                                return 17;
                                            }
                                            
                                            if(yy_.yytext!=""){
                                                let indentacion = yy_.yytext.replace(/^(\r\n|\r|\n)+/, '').length;
                                                console.log("indentacion->"+indentacion);
                                                if (indentacion > indent[0]) {
                                                indent.unshift(indentacion);
                                                return 15;
                                                }

                                                let dedents = [];

                                                while (indentacion < indent[0]) {
                                                dedents.push('DEDENT');
                                                indent.shift();
                                                }

                                                if (dedents.length) {
                                                dedent = dedents.length - 1;
                                                this.unput("");
                                                return 17;
                                                }

                                                return 6;
                                            }
                                        
break;
case 1: /*ignorar por el momento*/ 
break;
case 2:return 69
break;
case 3:return 68
break;
case 4:return 67
break;
case 5: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 6: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 7:return 14
break;
case 8:return 20
break;
case 9:return 21
break;
case 10:return 26
break;
case 11:return 29
break;
case 12:return 31
break;
case 13:return 65
break;
case 14:return 54
break;
case 15:return 55
break;
case 16:return 59
break;
case 17:return 60
break;
case 18:return 61
break;
case 19:return 'LLAVE_A'
break;
case 20:return 'LLAVE_C'
break;
case 21:return 'CORCH_A'
break;
case 22:return 'CORCH_C'
break;
case 23:return 10
break;
case 24:return 11
break;
case 25:return 36
break;
case 26:return 41
break;
case 27:return 45
break;
case 28:return 46
break;
case 29:return 49
break;
case 30:return 50
break;
case 31:return 47
break;
case 32:return 48
break;
case 33:return 66
break;
case 34:return 'PUNTO_Y_COMA'
break;
case 35:return 12
break;
case 36:return 'COMA'
break;
case 37:return 24
break;
case 38:return 9
break;
case 39:
                                            if(insEsAbierta){
                                                let finalTokens = [];
                                                finalTokens.push('DEDENT');
                                                finalTokens.push('EOF');
                                                if(finalTokens.length) return finalTokens;
                                            }else{
                                                return 5;
                                            }
                                        
break;
case 40:/*Instertar codigo para recuperar el error lexico*/
            //error
            ErrorLS = new Object();
            ErrorLS.lexema = yy_.yytext;
            ErrorLS.linea = yy_.yylloc.first_line;
            ErrorLS.columna = yy_.yylloc.first_column;
            ErrorLS.tipo = 'Léxico';
            ErrorLS.descripcion = 'El lexema '+yy_.yytext+' no es válido.';
            errores.push(ErrorLS);
    
break;
}
},
rules: [/^(?:(\r\n|\r|\n)+[ \t]*)/,/^(?:[ ]+)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:True|False\b)/,/^(?:"[^"]*")/,/^(?:'[^']*')/,/^(?:def\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:\*\*)/,/^(?:[+])/,/^(?:[-])/,/^(?:[*])/,/^(?:[/])/,/^(?:[%])/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:or\b)/,/^(?:and\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:not\b)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z]+[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Python;
exports.Parser = Python.Parser;
exports.parse = function () { return Python.parse.apply(Python, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}